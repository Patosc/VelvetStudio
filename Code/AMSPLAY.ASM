;/ACS\=p


DOS32VERSION	 = 0	;DOS32 Version
PMODEWVERSION	 = 1	;PMODEW version
TRANVERSION	 = 0	;Tran Version

LITEVERSION	 = 0	;Lite version. Only load AMS 2.2, Max 64 insts.
EXTRALITEVERSION = 0	;Disables Linear Freq. (Also set LITEVERSION)

PLAYER		 = 0	;Set to 1 if use as a player only
AUTODETECT_SC	 = 1	;Set to 1 to enable autodetection of soundcard (if not
			;already loaded in config)
CONVERTER	 = 0	;Set to 1 if use as a converter only
SPECIALVERSION	 = 0	;1= Special stupid version...

DEBUGON 	 = 0	;To debug the code


Comment &
ÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸
³									       ³
³	Velvet Music System/2 v3.0, Coded by Baldric 14/1-1994 - forever...    ³
³									       ³
ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
³									       ³
³									       ³
ÔÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¾
&


IF TRANVERSION		;\\
.386p
code32	segment para public use32
	assume cs:code32, ds:code32
Include Pmode.inc
ENDIF			;//



IF DOS32VERSION 	;\\
.386p
.model flat
.stack 65*1024					; Define a 65Kb stack
.code
Include dos32.inc
ENDIF			;//


IF PMODEWVERSION	;\\
.386p

.model flat
.code

; Stack is already defined in tracker.asm

;IFNDEF WATCOM
;_stack	 segment para stack 'STACK'
;	 db 1000h dup(?)
;_stack	 ends
;ENDIF
;
;_TEXT	segment use32 dword public 'CODE'
;	assume	cs:_TEXT,ds:_TEXT
Include PMW.inc
ENDIF			;//


Jumps
Locals

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ErrorCodes
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
SwapFileErr	equ	01h
LowMemFatalErr	equ	02h
NoMouseErr	equ	03h
HiMemFatalErr	equ	04h

HiMemErr	equ	0ah	;ModPlayerErrorCodes
GUSMemErr	equ	0bh
DiskFullErr	equ	0ch
FileErrorErr	equ	0dh
HelpFileErr	equ	0eh
HiMemErrNF	equ	0fh
GUSDramErr	equ	10h
OpenErr 	equ	11h
SeekErr 	equ	12h
ReadErr 	equ	13h
NoModuleErr	equ	14h
BadVersionErr	equ	15h
CreateErr	equ	16h
WriteErr	equ	17h
CloseErr	equ	18h
SizeErr 	equ	19h
DeleteErr	equ	1ah
SampleErr	equ	1bh
RenameErr	equ	1ch
OldXMErr	equ	1dh
TimeOutErr	equ	1eh
FREE3		equ	1fh
ConfigErr	equ	20h

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Envelope Stuff ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
ENV_SplitKBD		equ	0
ENV_Flags		equ	120		;FLAGS: fedcba9876543210
						       ;³³³³³³³³³³³³³³³À Volume :Loop on
						       ;³³³³³³³³³³³³³³ÀÄ Volume :Sustain on
						       ;³³³³³³³³³³³³³ÀÄÄ Volume :Envelope on
						       ;³³³³³³³³³³³³ÀÄÄÄ Panning:Loop on
						       ;³³³³³³³³³³³ÀÄÄÄÄ Panning:Sustain on
						       ;³³³³³³³³³³ÀÄÄÄÄÄ Panning:Envelope on
						       ;³³³³³³³³³ÀÄÄÄÄÄÄ Vibrato:Loop on
						       ;³³³³³³³³ÀÄÄÄÄÄÄÄ Vibrato:Sustain on
						       ;³³³³³³³ÀÄÄÄÄÄÄÄÄ Vibrato:Envelope on
						       ;³³³³³³ÀÄÄÄÄÄÄÄÄÄ Volume :Break Loop
						       ;³³³³³ÀÄÄÄÄÄÄÄÄÄÄ Panning:Break Loop
						       ;³³³³ÀÄÄÄÄÄÄÄÄÄÄÄ Vibrato:Break Loop
						       ;ÀÁÁÁÄÄÄÄÄÄÄÄÄÄÄÄ Reserved
ENV_Shadow		equ	122		;Inst Shadow
ENV_VolFade		equ	123		;Volume fadeout


ENV_VolSpeed		equ	125		;Speed of Vol envelope
ENV_NrVolPoints 	equ	126		;Nr of Vol Points
ENV_VolSustPoint	equ	127		;Volume sustain point
ENV_VolStart		equ	128		;Volume loop start point
ENV_VolEnd		equ	129		;Volume loop end point
ENV_VolPoints		equ	130		;VolumePoints

ENV_PanSpeed		equ	322		;Speed of Pan envelope
ENV_NrPanPoints 	equ	323		;Nr of Pan Points
ENV_PanSustPoint	equ	324		;Panning sustain point
ENV_PanStart		equ	325		;Panning loop start point
ENV_PanEnd		equ	326		;Panning loop end point
ENV_PanPoints		equ	327		;PanningPoints

ENV_VibSpeed		equ	519		;Speed of Pan envelope
ENV_NrVibPoints 	equ	520		;Nr of Pan Points
ENV_VibSustPoint	equ	521		;Panning sustain point
ENV_VibStart		equ	522		;Panning loop start point
ENV_VibEnd		equ	523		;Panning loop end point
ENV_VibPoints		equ	524		;PanningPoints

Int3		Macro
IF	DEBUGON
	cli
	int	3
ENDIF

EndM

ConvertNote	Macro In,Out
	push	eax
	mov	eax,In
	call	Getperiod
	mov	Out,eax
	pop	eax
	endm

GetOffset Macro inst,out,off
	push	ebx ebp
	mov	ebx,inst
	mov	ebp,off
	call	GO
	pop	ebp ebx
	mov	out,TempOffs
	endm

AMSVersion	equ	0202h	;Version Of AMSFormat
AISVersion	equ	0100h	;Version Of AISFormat
ASEVersion	equ	0100h	;Version Of ASEFormat

IFE LITEVERSION
MaxSamples	equ	4096
ELSE
MaxSamples	equ	16*64
ENDIF

Global PutDecimal:near	; Included for debugging purposes - Vic

Global Force_SC_Config:Byte

Global ModSpeed:Byte,CurrRow:Word,Channels:Byte,MIDIChannels:Byte,Commands:Byte,AllocChannels:Byte
Global MasterVolume:Byte,TempoDisabled:Byte,SoundCard_IRQ:Byte,SoundCard_MIDIIRQ:Byte,SoundCard_DMA1:Byte,SoundCard_DMA2:Byte
Global SkipPanPot:Byte,TuneStopped:Byte,DMAOnOff:Byte,TypeFile:byte,TimerSelect:Byte
Global GlobalVolume:Byte,PatternDelay:Byte,Amplification:Byte,SB_16BitsAllowed:Byte,SB_StereoAllowed:Byte
Global InitSpeed:Byte,SongFinished:Byte,LoadFXEngine:Byte,AllocFailed:Byte
Global Pt_Counter:Byte,Samples:Byte,LoadAllPTSamples:Byte

Global Mute:Byte:96,SongName:Byte:30,Vol:Byte:32,Volume:Byte:32,Composer:Byte:30
Global GoToRow:Word,Sync_Byte:Byte
Global Note:Byte:32,CurrNoteTable:Byte:32,CurrInst:Byte:32
Global VoiceControl:Byte:MaxSamples
Global Shelling:Byte


Global MasterFrequency:Word,Positions:Word,CurrPosition:Word,CurrPatt:Word,CurrPatt2:Word,PositionJump:Word
Global SoundCard_BasePort:Word,ModTempo:Word,SubFrequency:Word,InitBPM:Word
Global CurrentSample:Word,SoundCard_BasePort2:Word

Global GUS_DramSize:Dword,GUS_DramSize2:Dword,SampleNamesPtr:Dword,ChannelNamesPtr:Dword
Global InstNamesPtr:Dword,GUS_DramFree:Dword,GUS_TempBuffPtr:Dword,LowMemPtr:Dword,HiMemPtr:Dword,LowMemEnd:Dword
Global HiMemEnd:Dword,LoadOffset:Dword,emptypattern:dword,GUS_RollOverDataSize:Dword
Global DMABuffer:Dword,SampMainOffset:Dword,PatternOrderPtr:Dword,SoundCard:Dword,SoundCardSub:Dword
Global InstrumentInfo:Dword,CallRoutine:Dword,PatternStart:Dword,ModNamePtr:Dword
Global PlayFreq:Dword,DMABuffer_Phys:Dword,EnvVolCheck:Dword,SizeAllocated:Dword
Global AllocTable:Dword:1052*2
Global SampleOffsetMem:Dword,SampleOffsetStart:Dword:MaxSamples,LoopStart:Dword:MaxSamples,LoopEnd:Dword:MaxSamples,SampleOffsetEnd:Dword:MaxSamples
Global MemoryFree:Dword,ANewSecond:Dword

Global LoadMod:Near,InitSoundCard:Near,DeInitSoundCard:Near,ClearMod:Near,MemoryInit:Near
Global StartTimer:Near,StopTimer:Near,MemAlloc:Near,MemDisalloc:Near,DMA_GetCount:Near
Global SetZeroVol:Near,SetOrigVol:Near,FixAllocChannels:Near,CreatePostProcess:near
Global StopOneVoice:Near,AMS_GetGUSEnv:Near,TurnOnSoundCard:Near,SC_ChangeReplay:Near
Global DetectSoundCard:Near,InitJumpTable:Near,ClearForPlay:Near,GetMaxHertz:Near
Global UpdateShadows:Near,AllocSample:Near,FXEngine:Near,SpeechEngine:Near,StopSpeech:Near
Global CheckSpeech:Near,IndicateTime:Near
Global FixAllocSampleError:Near

TempOffs	dd	0
GO:	push	eax edx
	add	ebp,InstrumentInfo
	mov	eax,716
	dec	ebx
	mul	ebx
	add	ebp,eax
	mov	TempOffs,ebp
	pop	edx eax
	ret

Include ams_nos.asm	;No Sound Driver
Include ams_gus.asm	;GUS Driver
Include ams_sbp.asm	;SoundBlaster PRO driver.
Include ams_pnp.asm	;GUS PnP driver.
Include ams_load.asm

IFE PLAYER
include amsinc.asm
ENDIF


IF PLAYER
_retp:
	popad
	ret
ASKCONTLOAD:
	clc
SETINITIALENVELOPES:
InsSampleRate:
	ret
OPEL:	jnz	opel
SHELLING		db	0
CURRENTSAMPLE		dw	0
SAMPMAINOFFSET		dd	0
CURRPATTLENGTH		dd	0
CURRENTINSTRUMENT	db	0
LOADALLPTSAMPLES	db	0
PANMAX			db	15
SAMPLING		db	0
GUS_ROLLOVERDATASIZE	dd	0
SAMPLINGBUFFOFF 	dd	0
STEREO			db	0
INPUTOFFSET		dd	0
OUTPUTOFFSET		dd	0
INPUTSIZE		dd	0
PACKCHARACTER		db	255
TYPEFILE		db	0
SKIPPANPOT		db	0
LinFreq 		db	0
SampleFreq		dw	0
SampleRate		db	0
StartSample		db	0
StopSample		db	0
GUSSampleFreq		dw	0
CurrAdd 		dd	0
SampleConvert		db	0
SAMPLE0 		db	0
ENDIF

IF CONVERTER
ASKCONTLOAD:
INSERTSCOPES:
KILLINST2:
SETINITIALENVELOPES:
	ret
OPEL:	jnz	opel

SHELLING		db	0
CURRENTWILDCARD 	dd	0
CURRENTSAMPLE		dw	0
PACKINGBYTE		db	255
LOADFTLOOP		db	0
SAMPMAINOFFSET		dd	0
LOADSAMPLECONVERT	db	0
TYPEFILE		db	0
MODNAME 		db	13 dup(0)
O_INPROGRESS		db	0
CURRENTINSTRUMENT	db	0
SAVEMODOCTAVES		db	0
DESTROYSAMPLE		db	0
GUS_ROLLOVERDATASIZE	dd	0
LEFTEQUALIZER		dd	0
SAMPLENGTH		dd	0
RESAMPLEMODE		db	0
DESCTABLE		dd	0
CURRPATTLENGTH		dd	0
LOADALLPTSAMPLES	db	0
PANMAX			db	0
DMAPLAY_CHAN		db	0
PLAYSAMPLE0		db	0
SAMPLE0 		db	0
SampleConvert		db	0
ENDIF


;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ DMA Specific ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;* 1st & 2nd DMA Controler's ports *;

DMA_STAT	db	008h,0D0h	;read status register
DMA_CMD 	db	008h,0D0h	;write command register
DMA_REQ 	db	009h,0D2h	;write request register
DMA_SNGL	db	00Ah,0D4h	;write single bit register
DMA_MODE	db	00Bh,0D6h	;write mode register
DMA_CLRFF	db	00Ch,0D8h	;clear byte ptr flip;flop
DMA_MCLR	db	00Dh,0DAh	;master clear register
DMA_CLRM	db	00Eh,0DCh	;clear mask register
DMA_WRTALL	db	00Fh,0DEh	;write all mask register

; * ports for 8 channels *;

DMA_PAGE	db 087h,083h,081h,082h,08Fh,08Bh,089h,08Ah ; page register
DMA_ADDR	db 000h,002h,004h,006h,0C0h,0C4h,0C8h,0CCh ; base address
DMA_CNT 	db 001h,003h,005h,007h,0C2h,0C6h,0CAh,0CEh ; base count

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Sample Variables ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

StartClear		dd	$

SampleOffsetStart	dd	MaxSamples dup(?)	 ;Start Of Samp
LoopStart		dd	MaxSamples dup(?)	 ;Start Of Loop
LoopEnd 		dd	MaxSamples dup(?)	 ;End Of Loop
SampleOffsetEnd 	dd	MaxSamples dup(?)	 ;End Of Samp
FineTunes		db	MaxSamples dup(?)	 ;PanPot + FineTune for samples.
SampleRates		dw	MaxSamples dup(?)	 ;SampleRates for C-2
Relativenote		db	MaxSamples dup(?)	 ;Relative C-2
Volumes 		db	MaxSamples dup(?)	 ;Volumes for all samples
VoiceControl		db	MaxSamples dup(?)	 ;udubl6pp
							 ;u=unused,d=direction,b=bidi
							 ;l=loop,6=16bit,p=pack
;90112 bytes
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ GUS Variables ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


;SampleOffsetMem	 dd	 0		 ;Current Address in DRAM
GUS_OldVolume		db	32 dup(?)
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Old Header ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Header		db	7 dup(?)	;Extreme
FormatVer	dw	?		;Version Of ModFormat
Channels	db	?		;Nr Of Used Sample Channels
Samples 	db	?		;Nr Of Used Instruments
Patterns	dw	?		;Nr of Used Patterns
Positions	dw	?		;Nr of Positions
MIDIChannels	db	?		;Nr Of Virtual MIDI Channels
NrOfExtra	dw	?		;ExtraBytes
MIDIChInfo	db	32 dup(?)	;Virtual MIDI Channel Info
TmpSampInfo	db	80 dup(?)
Commands	db	?,?,?,? 	;Commands (4 bytes for compability)
;ÄÄÄÄÄÄÄÄÄÄ CLEARED ÄÄÄÄÄÄÄÄÄ ChannelSpecific Data ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
ClearOffset1	dd	0
Command 	dw	32*8 dup(?)	;Effect Commands (must be 8)
CurrSample	dw	32 dup(?)	;Current SampleNr
CurrInst	db	32 dup(?)	;Current InstNr
Arpeggio	db	32 dup(?,?,?)	;Arpeggio Notes
LoopCount	db	16 dup(?)	;Command E6
LoopToRow	dw	16 dup(?)	;Command E6
LoopStackPtr	dd	0
CurrVolume	db	32 dup(?)	;Current Volume
PortTO		db	32 dup(?)	;Note To Portamento TO
PortSpeed	db	32 dup(?)	;Speed to Portamento
SampOffset	db	32 dup(?)	;SampleOffsetSave
RetrigSave	db	32 dup(?)	;Retrig Save
TremoloCmd	db	32 dup(?)	;Command to Tremolo
TremoloPos	db	32 dup(?)	;Position in Curve
VibratoCmd	db	32 dup(?)	;Command to Vibrato
VibratoPos	db	32 dup(?)	;Position in curve
Vol		db	32 dup(?)	;Current Volume, may be altered
Volume		db	32 dup(?)	;Current Volume
WaveControl	db	32 dup(?)	;what sinecurve in vibrato
ExtraFS 	db	32 dup(?)	;ExtraFineSlide

R_Note		db	32 dup(?)	;Real Main Note (not splitted)
R_CurrNoteTable db	32 dup(?)	;Real Current Note (not splitted)

Note		db	32 dup(?)	;Main Note (always set to curr note)
CurrNoteTable	db	32 dup(?)	;Current Note  (current played note)
VibratoTable	dw	32 dup(?)	;Current Vibrato
SlideTable	dd	32 dup(?)	;Current Slide
FineTuneTable	dw	32 dup(?)	;Current FineTune
CurrentChannelPanPot	db	32 dup(?);Panpot


PlayDirection	dd	?,?		;1=Backw,0=Forw,1=PingOn,0=PingOff
GlissControl	dd	?		;Glissando Control
LastGliss	db	32 dup(?)

;ÄÄÄÄÄÄÄÄÄÄ CLEARED ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Other ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
KeyOffTable	db	32 dup(?)	;Key off
MIDIChanTable	db	32 dup(?)	;MIDI Channels in use
ClearOffset2	dd	?


SkipFlag	dw	32 dup(?)	;fedcba9876543210
					;³³³³³³³³³³³³³³³À Vol
					;³³³³³³³³³³³³³³ÀÄ Freq
					;³³³³³³³³³³³³³ÀÄÄ Play
					;³³³³³³³³³³³³ÀÄÄÄ SampOffset
					;³³³³³³³³³³ÀÁÄÄÄÄ Vibrato
					;³³³³³³³³ÀÁÄÄÄÄÄÄ Tremolo
					;³³³³³³ÀÁÄÄÄÄÄÄÄÄ Arpeggio
					;ÀÁÁÁÁÁÄÄÄÄÄÄÄÄÄÄ Unused

SongName	db	30 dup(?)	;Modname
ShitLength	dd	?		;Used in Load Names
AISVer		dw	?
Mute		db	96 dup(?)	;1 = Channel Muted
;ÄÄÄÄÄÄÄÄÄÄ CLEARED ÄÄÄÄÄÄÄÄ Pattern Specific Data ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

CurrPosition	dw	0	;Current Position
CurrPatt	dw	0	;Current Pattern
CurrPatt2	dw	0	;Current Pattern 2
CurrRow 	dw	0	;Current Row
GotoRow 	dw	-1
PatternDelay	db	0	;Counter to PatternDelay
PatternDelay2	db	0	;Counter to PatternDelay 2
PositionJump	dw	-1	;Priority
PatternSize	dd	0	;Size of a packed pattern
Even
Pt_Counter	db	5	;Counts to mod-speed
NrOfPackedRows	db	0	;Used In Unpacker
PatternPlay	db	0	;set to 1 if only play current pattern
EndClear	dd	$
;---------- STOP CLEAR


DetectBuffer	db	144 dup(0)	;Used in DetectRoutine

PatternSize2	dd	0	;Size of a unpacked pattern
RowSize 	dd	0	;Size of a row (2+2*MaxCommands)
CHRowSize	dd	0	;Size of a Complete row Ch*(2+2*MaxCommands)
PatternOrderPtr dd	0	;Pointer to Patternorder
PatternOffset	dd	0	;Offset in a Pattern
PatternStart	dd	0	;Curr patt
EmptyPattern	dd	0	;Ptr to The Empty pattern
AllocChannels	db	16	;Maximum used channels in tune
DefaultChannels db	16	;Default nr of Channels
DefaultCommands db	2	;Default nr of commands
DefaultRows	dw	64	;Default nr of rows
TempBufferPtr	dd	0	;Buffer
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Volume Specific Data ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
MasterVolume	db	127
GlobalVolume	db	127
ChannelMaster	db	32 dup(127)
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Timing Specific Data ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
IRQ0Save	dd	0	;Save for IRQ0Handler (Real Mode)
TuneStopped	db	1	;1 if music Paused/Stopped
SongFinished	db	0	;1 if F00, 2 if restart,3=if fading down
TuneStoppedSave db	1
IntsOn		db	0	;1 if interrupt is on
TempoDisabled	db	0	;1 if Tempo Disabled
ANewSecond	dd	0	;increased every second(never reset)
LastSecCheck	dd	0	;SaveTime
ModSpeed	db	6	;Speed in modules
ModTempo	dw	7d00h	;Tempo in modules
;TimerRate	 dw	 0
Timerselect	db	0	;0=PC timer,1=GUS timer

InitBPM 	dw	7d00h	;Initial BPM
InitSpeed	db	6	;Initial Speed
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Other ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Extreme 	db	'Extreme'       ;Validation Check
AMShdr		db	'AMShdr',01ah
AIShdr		db	'AIShdr',01ah
APShdr		db	'APShdr',1ah
ACShdr		db	'ACShdr',1ah
ASEHdr		db	'ASEhdr',1ah

XI_Determ	db	'Extended Instrument: '
XM_Determ	db	'Extended Module: '
PAT_Determ	db	'GF1PATCH110',0
ULT_Determ	db	'MAS_UTrack_V00'
SampHeaderSize	dd	0
NrOfWaveForms	dw	0			;Nr of samples in an Instrument
Samp_Start	dd	0
Samp_End	dd	0
Loop_Start	dd	0
Loop_End	dd	0
ErrorLoadSample db	0
NotLoaded	db	'Error While Loading!  '
RealNote	db	0

InstrumentInfo	dd	0			;Ptr to Inst info
Composer	db	30 dup(0)		;Composer Field
TuneFlags	dw	0			;Tune Specific Flags
DMAOnOff	db	1

ModNamePtr	dd	0
DescLength	dd	0
Undobaff	dd	0

Inst0		dd	0


SoundCard		dd	0		;0=NoSound,1=GUS,2=SBPRO,3=SB16,4=SB,5=MAX,6=PNP
SoundCardSub		dd	0		;Specific Card version
SoundCard_BasePort	dw	0
SoundCard_BasePort2	dw	0
SoundCard_IRQ		db	11,0
SoundCard_MIDIIRQ	db	5,0
SoundCard_DMA1		db	1,0
SoundCard_DMA2		db	1,0

DMA_Channel	db	0
Mode		db	0
SampleBits	db	0

DMA_reg_list	db	0,1,0,2,0,3,4,5
IRQ_reg_list	db	0,0,1,3,0,2,0,4,0,0,0,5,6,0,0,7

IRQConvert	db	2,3,5,7,11,12,15
DMAConvert	db	0,1,3

DMABuffer	dd	0	;Relative Ptr to DMA SampleBuffer
DMABuffer_Phys	dd	0	;Physical Ptr to DMA SampleBuffer

DMAPlay_TC	db	0
DMA_control	db	0
IRQ_control	db	0

Handle		dw	0	;FileHandle
StackSave	dd	0	;The Saved Stack (for errorhandler)
SampleNamesPtr	dd	0	;All SampleNames
InstNamesPtr	dd	0	;All InstrumentNames
ChannelNamesPtr dd	0	;All ChannelNames
GUS_TempBuffPtr dd	0

GUS_Divisor	dw	0
GUS_DramSize	dd	0	;Size Of GUS Dram
GUS_DramSize2	dd	0	;Size Of GUS Dram (Save)

SampleOffsetStart2	dd	0
SampleOffsetEnd2	dd	0
LoopStart2		dd	0
LoopEnd2		dd	0
VoiceCtrl		db	0

PlayInfo	db	32 dup(0)
RampDownTable	db	32 dup(0)
ERampDownTable	db	32 dup(0)
StopRampTable	db	32 dup(0)
DoERamp 	db	0
CallRoutine	dd	0		;The 102.4 times/sec call routine
Sync_Byte	db	0		;A special byte for syncing music to code

IFE LITEVERSION
Periods 	dw	1712,1616,1524,1440,1356,1280,1208,1140,1076,1016, 960, 906
		dw	856, 808, 762, 720, 678, 640, 604, 570, 538, 508, 480, 453
		dw	428, 404, 381, 360, 339, 320, 302, 285, 269, 254, 240, 226
		dw	214, 202, 190, 180, 170, 160, 151, 143, 135, 127, 120, 113
		dw	107, 101,  95,	90,  85,  80,  76,  71,  67,  64,  60,	57
ENDIF

pt_PeriodTable	dd	109568,103418,97614,92135,86964,82083,77476,73128,69024,65150,61493,58042

IFE EXTRALITEVERSION
LinFreqTable dd 4194304,4209473,4224697,4239977,4255311,4270701,4286147,4301649,4317206,4332820,4348490,4364218,4380001,4395842,4411741,4427697,4443710,4459781,4475911,4492099,4508345,4524650,4541015,4557438,4573921,4590463,4607065,4623727,4640450,4657233,4674077,4690981,4707947,4724974,4742063,4759213,4776425,4793700,4811037,4828437,4845900,4863426,4881016,4898669,4916385,4934166,4952012,4969921,4987896,5005935,5024040,5042211,5060447,5078748,5097117,5115551,5134052,5152621,5171256,5189959,5208729,5227567,5246474,5265448,5284492,5303604,5322785,5342036,5361356,5380747,5400207,5419738,5439339,5459011,5478755,5498570,5518456,5538415,5558445,5578548,5598724,5618973,5639295,5659690,5680159,5700702,5721320,5742012,5762779,5783621,5804539,5825532,5846601,5867746,5888967,5910266,5931641,5953094,5974624
	     dd 5996233,6017919,6039684,6061527,6083450,6105452,6127533,6149694,6171936,6194258,6216660,6239144,6261709,6284355,6307084,6329894,6352787,6375763,6398822,6421965,6445191,6468501,6491895,6515374,6538938,6562587,6586322,6610143,6634049,6658042,6682122,6706289,6730544,6754886,6779316,6803834,6828442,6853138,6877923,6902799,6927764,6952819,6977965,7003202,7028530,7053950,7079462,7105066,7130763,7156552,7182435,7208412,7234482,7260647,7286906,7313260,7339710,7366255,7392896,7419634,7446468,7473400,7500429,7527555,7554780,7582103,7609525,7637046,7664667,7692387,7720208,7748129,7776152,7804276,7832501,7860829,7889259,7917791,7946427,7975167,8004010,8032958,8062011,8091168,8120431,8149800,8179275,8208857,8238546,8268342,8298246,8328258,8358378,8388608,8418947,8449395,8479954,8510623,8541403,8572295,8603298
	     dd 8634413,8665641,8696981,8728436,8760003,8791685,8823482,8855394,8887421,8919563,8951823,8984198,9016691,9049301,9082030,9114876,9147842,9180927,9214131,9247455,9280900,9314466,9348154,9381963,9415894,9449948,9484126,9518426,9552851,9587401,9622075,9656875,9691801,9726853,9762032,9797338,9832771,9868333,9904024,9939843,9975792,10011871,10048081,10084422,10120894,10157497,10194234,10231103,10268105,10305242,10342512,10379918,10417458,10455135,10492948,10530897,10568984,10607208,10645571,10684072,10722713,10761494,10800414,10839476,10878679,10918023,10957510,10997140,11036913,11076830,11116891,11157097,11197448,11237946,11278590,11319380,11360319,11401405,11442640,11484025,11525559,11567243,11609078,11651064,11693202,11735492,11777935,11820532,11863283,11906189,11949249,11992466,12035839,12079368,12123055,12166900,12210904,12255067,12299389,12343872,12388516,12433321,12478288,12523418
	     dd 12568711,12614168,12659789,12705575,12751527,12797645,12843930,12890382,12937002,12983791,13030749,13077877,13125175,13172644,13220286,13268099,13316085,13364245,13412579,13461088,13509772,13558632,13607669,13656884,13706276,13755847,13805598,13855528,13905639,13955931,14006405,14057061,14107901,14158924,14210132,14261526,14313105,14364871,14416824,14468964,14521294,14573813,14626521,14679420,14732511,14785793,14839269,14892937,14946800,15000858,15055111,15109560,15164206,15219050,15274093,15329334,15384775,15440416,15496259,15552304,15608552,15665003,15721658,15778518,15835583,15892855,15950334,16008021,16065917,16124022,16182337,16240863,16299601,16358551,16417715,16477092,16536684,16596492,16656516,16716757,16777216,16837894,16898790,16959908,17021246,17082806,17144590,17206596,17268826,17331282,17393962,17456872,17520006,17583370,17646964,17710788,17774842,17839126,17903646,17968396
	     dd 18033382,18098602,18164060,18229752,18295684,18361854,18428262,18494910,18561800,18628932,18696308,18763926,18831788,18899896,18968252,19036852,19105702,19174802,19244150,19313750,19383602,19453706,19524064,19594676,19665542,19736666,19808048,19879686,19951584,20023742,20096162,20168844,20241788,20314994,20388468,20462206,20536210,20610484,20685024,20759836,20834916,20910270,20985896,21061794,21137968,21214416,21291142,21368144,21445426,21522988,21600828,21678952,21757358,21836046,21915020,21994280,22073826,22153660,22233782,22314194,22394896,22475892,22557180,22638760,22720638,22802810,22885280,22968050,23051118,23134486,23218156,23302128,23386404,23470984,23555870,23641064,23726566,23812378,23898498,23984932,24071678,24158736,24246110,24333800,24421808,24510134,24598778,24687744,24777032,24866642,24956576,25046836,25137422,25228336,25319578,25411150,25503054,25595290,25687860,25780764
	     dd 25874004,25967582,26061498,26155754,26250350,26345288,26440572,26536198,26632170,26728490,26825158,26922176,27019544,27117264,27215338,27313768,27412552,27511694,27611196,27711056,27811278,27911862,28012810,28114122,28215802,28317848,28420264,28523052,28626210,28729742,28833648,28937928,29042588,29147626,29253042,29358840,29465022,29571586,29678538,29785874,29893600,30001716,30110222,30219120,30328412,30438100,30548186,30658668,30769550,30880832,30992518,31104608,31217104,31330006,31443316,31557036,31671166,31785710,31900668,32016042,32131834,32248044,32364674,32481726,32599202,32717102,32835430,32954184,33073368,33192984,33313032,33433514,33554432,33675788,33797580,33919816,34042492,34165612,34289180,34413192,34537652,34662564,34787924,34913744,35040012,35166740,35293928,35421576,35549684,35678252,35807292,35936792,36066764,36197204,36328120,36459504,36591368,36723708,36856524,36989820
	     dd 37123600,37257864,37392616,37527852,37663576,37799792,37936504,38073704,38211404,38349604,38488300,38627500,38767204,38907412,39048128,39189352,39331084,39473332,39616096,39759372,39903168,40047484,40192324,40337688,40483576,40629988,40776936,40924412,41072420,41220968,41370048,41519672,41669832,41820540,41971792,42123588,42275936,42428832,42582284,42736288,42890852,43045976,43201656,43357904,43514716,43672092,43830040,43988560,44147652,44307320,44467564,44628388,44789792,44951784,45114360,45277520,45441276,45605620,45770560,45936100,46102236,46268972,46436312,46604256,46772808,46941968,47111740,47282128,47453132,47624756,47796996,47969864,48143356,48317472,48492220,48667600,48843616,49020268,49197556,49375488,49554064,49733284,49913152,50093672,50274844,50456672,50639156,50822300,51006108,51190580,51375720,51561528,51748008,51935164,52122996,52311508,52500700,52690576,52881144,53072396
	     dd 53264340,53456980,53650316,53844352,54039088,54234528,54430676,54627536,54825104,55023388,55222392,55422112,55622556,55823724,56025620,56228244,56431604,56635696,56840528,57046104,57252420,57459484,57667296,57875856,58085176,58295252,58506084,58717680,58930044,59143172,59357076,59571748,59787200,60003432,60220444,60438240,60656824,60876200,61096372,61317336,61539100,61761664,61985036,62209216,62434208,62660012,62886632,63114072,63342332,63571420,63801336,64032084,64263668,64496088,64729348,64963452,65198404,65434204,65670860,65908368,66146736,66385968,66626064,66867028,67108864,67351576,67595160,67839632,68084984,68331224,68578360,68826384,69075304,69325128,69575848,69827488,70080024,70333480,70587856,70843152,71099368,71356504,71614584,71873584,72133528,72394408,72656240,72919008,73182736,73447416,73713048,73979640,74247200,74515728,74785232,75055704,75327152,75599584,75873008,76147408
	     dd 76422808,76699208,76976600,77255000,77534408,77814824,78096256,78378704,78662168,78946664,79232192,79518744,79806336,80094968,80384648,80675376,80967152,81259976,81553872,81848824,82144840,82441936,82740096,83039344,83339664,83641080,83943584,84247176,84551872,84857664,85164568,85472576,85781704,86091952,86403312,86715808,87029432,87344184,87660080,87977120,88295304,88614640,88935128,89256776,89579584,89903568,90228720,90555040,90882552,91211240,91541120,91872200,92204472,92537944,92872624,93208512,93545616,93883936,94223480,94564256,94906264,95249512,95593992,95939728,96286712,96634944,96984440,97335200,97687232,98040536,98395112,98750976,99108128,99466568,99826304,100187344,100549688,100913344,101278312,101644600,102012216,102381160,102751440,103123056,103496016,103870328,104245992,104623016,105001400,105381152,105762288,106144792,106528680,106913960,107300632,107688704,108078176,108469056
	     dd 108861352,109255072,109650208,110046776,110444784,110844224,111245112,111647448,112051240,112456488,112863208,113271392,113681056,114092208,114504840,114918968,115334592,115751712,116170352,116590504,117012168,117435360,117860088,118286344,118714152,119143496,119574400,120006864,120440888,120876480,121313648,121752400,122192744,122634672,123078200,123523328,123970072,124418432,124868416,125320024,125773264,126228144,126684664,127142840,127602672,128064168,128527336,128992176,129458696,129926904,130396808,130868408,131341720,131816736,132293472,132771936,133252128,133734056,134217728,134703152,135190320,135679264,136169968,136662448,137156720,137652768,138150608,138650256,139151696,139654976,140160048,140666960,141175712,141686304,142198736,142713008,143229168,143747168,144267056,144788816,145312480,145838016,146365472,146894832,147426096,147959280,148494400,149031456,149570464,150111408,150654304
	     dd 151199168,151746016,152294816,152845616,153398416,153953200,154510000,155068816,155629648,156192512,156757408,157324336,157893328,158464384,159037488,159612672,160189936,160769296,161350752,161934304,162519952,163107744,163697648,164289680,164883872,165480192,166078688,166679328,167282160,167887168,168494352,169103744,169715328,170329136,170945152,171563408,172183904,172806624,173431616,174058864,174688368,175320160,175954240,176590608,177229280,177870256,178513552,179159168,179807136,180457440,181110080,181765104,182422480,183082240,183744400,184408944,185075888,185745248,186417024,187091232,187767872,188446960,189128512,189812528,190499024,191187984,191879456,192573424,193269888,193968880,194670400,195374464,196081072,196790224,197501952,198216256,198933136,199652608,200374688,201099376,201826688,202556624,203289200,204024432,204762320,205502880,206246112,206992032,207740656,208491984
	     dd 209246032,210002800,210762304,211524576,212289584,213057360,213827920,214601264,215377408,216156352,216938112,217722704,218510144,219300416,220093552,220889568,221688448,222490224,223294896,224102480,224912976,225726416,226542784,227362112,228184416,229009680,229837936,230669184,231503424,232340704,233181008,234024336,234870720,235720176,236572688,237428304,238286992,239148800,240013728,240881776,241752960,242627296,243504800,244385488,245269344,246156400,247046656,247940144,248836864,249736832,250640048,251546528,252456288,253369328,254285680,255205344,256128336,257054672,257984352,258917392,259853808,260793616,261736816,262683440,263633472,264586944,265543872,266504256,267468112,268435456,269406304,270380640,271358528,272339936,273324896,274313440,275305536,276301216,277300512,278303392,279309952,280320096,281333920,282351424,283372608,284397472,285426016,286458336,287494336,288534112,289577632
	     dd 290624960,291676032,292730944,293789664,294852192,295918560,296988800,298062912,299140928,300222816,301308608,302398336,303492032,304589632,305691232,306796832,307906400,309020000,310137632,311259296,312385024,313514816,314648672,315786656,316928768,318074976,319225344,320379872,321538592,322701504,323868608,325039904,326215488,327395296,328579360,329767744,330960384,332157376,333358656,334564320,335774336,336988704,338207488,339430656,340658272,341890304,343126816,344367808,345613248,346863232,348117728,349376736,350640320,351908480,353181216,354458560,355740512,357027104,358318336,359614272,360914880,362220160,363530208,364844960,366164480,367488800,368817888,370151776,371490496,372834048,374182464,375535744,376893920,378257024,379625056,380998048,382375968,383758912,385146848,386539776,387937760,389340800,390748928,392162144,393580448,395003904,396432512,397866272,399305216,400749376,402198752
	     dd 403653376,405113248,406578400,408048864,409524640,411005760,412492224,413984064,415481312,416983968,418492064,420005600,421524608,423049152,424579168,426114720,427655840,429202528,430754816,432312704,433876224,435445408,437020288,438600832,440187104,441779136,443376896,444980448,446589792,448204960,449825952,451452832,453085568,454724224,456368832,458019360,459675872,461338368,463006848,464681408,466362016,468048672,469741440,471440352,473145376,474856608,476573984,478297600,480027456,481763552,483505920,485254592,487009600,488770976,490538688,492312800,494093312,495880288,497673728,499473664,501280096,503093056,504912576,506738656,508571360,510410688,512256672,514109344,515968704,517834784,519707616,521587232,523473632,525366880,527266944,529173888,531087744,533008512,534936224,536870912,538812608,540761280,542717056,544679872,546649792,548626880,550611072,552602432,554601024,556606784,558619904
	     dd 560640192,562667840,564702848,566745216,568794944,570852032,572916672,574988672,577068224,579155264,581249920,583352064,585461888,587579328,589704384,591837120,593977600,596125824,598281856,600445632,602617216,604796672,606984064,609179264,611382464,613593664,615812800,618040000,620275264,622518592,624770048,627029632,629297344,631573312,633857536,636149952,638450688,640759744,643077184,645403008,647737216,650079808,652430976,654790592,657158720,659535488,661920768,664314752,666717312,669128640,671548672,673977408,676414976,678861312,681316544,683780608,686253632,688735616,691226496,693726464,696235456,698753472,701280640,703816960,706362432,708917120,711481024,714054208,716636672,719228544,721829760,724440320,727060416,729689920,732328960,734977600,737635776,740303552,742980992,745668096,748364928,751071488,753787840,756514048,759250112,761996096,764751936,767517824,770293696,773079552,775875520
	     dd 778681600,781497856,784324288,787160896,790007808,792865024,795732544,798610432,801498752,804397504,807306752,810226496,813156800,816097728,819049280,822011520,824984448,827968128,830962624,833967936,836984128,840011200,843049216,846098304,849158336,852229440,855311680,858405056,861509632,864625408,867752448,870890816,874040576,877201664,880374208,883558272,886753792,889960896,893179584,896409920,899651904,902905664,906171136,909448448,912737664,916038720,919351744,922676736,926013696,929362816,932724032,936097344,939482880,942880704,946290752,949713216,953147968,956595200,960054912,963527104,967011840,970509184,974019200,977541952,981077376,984625600,988186624,991760576,995347456,998947328,1002560192,1006186112,1009825152,1013477312,1017142720,1020821376,1024513344,1028218688,1031937408,1035669568,1039415232,1043174464,1046947264,1050733760,1054533888,1058347776,1062175488,1066017024,1069872448
	     dd 1073741824,1077625216,1081522560,1085434112,1089359744,1093299584,1097253760,1101222144,1105204864,1109202048,1113213568,1117239808,1121280384,1125335680,1129405696,1133490432,1137589888,1141704064,1145833344,1149977344,1154136448,1158310528,1162499840,1166704128,1170923776,1175158656,1179408768,1183674240,1187955200,1192251648,1196563712,1200891264,1205234432,1209593344,1213968128,1218358528,1222764928,1227187328,1231625600,1236080000,1240550528,1245037184,1249540096,1254059264,1258594688,1263146624,1267715072,1272299904,1276901376,1281519488,1286154368,1290806016,1295474432,1300159616,1304861952,1309581184,1314317440,1319070976,1323841536,1328629504,1333434624,1338257280,1343097344,1347954816,1352829952,1357722624,1362633088,1367561216,1372507264,1377471232,1382452992,1387452928,1392470912,1397506944,1402561280,1407633920,1412724864,1417834240,1422962048,1428108416,1433273344,1438457088,1443659520,1448880640
	     dd 1454120832,1459379840,1464657920,1469955200,1475271552,1480607104,1485961984,1491336192,1496729856,1502142976,1507575680,1513028096,1518500224,1523992192,1529503872,1535035648,1540587392,1546159104,1551751040,1557363200,1562995712,1568648576,1574321792,1580015616,1585730048,1591465088,1597220864,1602997504,1608795008,1614613504,1620452992,1626313600,1632195456,1638098560,1644023040,1649968896,1655936256,1661925248,1667935872,1673968256,1680022400,1686098432,1692196608,1698316672,1704458880,1710623360,1716810112,1723019264,1729250816,1735504896,1741781632,1748081152,1754403328,1760748416,1767116544,1773507584,1779921792,1786359168,1792819840,1799303808,1805811328,1812342272,1818896896,1825475328,1832077440,1838703488,1845353472,1852027392,1858725632,1865448064,1872194688,1878965760,1885761408,1892581504,1899426432,1906295936,1913190400,1920109824,1927054208,1934023680,1941018368,1948038400,1955083904
	     dd 1962154752,1969251200,1976373248,1983521152,1990694912,1997894656,2005120384,2012372224,2019650304,2026954624,2034285440,2041642752,2049026688,2056437376,2063874816,2071339136,2078830464,2086348928,2093894528,2101467520,2109067776,2116695552,2124350976,2132034048,2139744896,2147483648,2155250432,2163045120,2170868224,2178719488,2186599168,2194507520,2202444288,2210409728,2218404096,2226427136,2234479616,2242560768,2250671360,2258811392,2266980864,2275179776,2283408128,2291666688,2299954688,2308272896,2316621056,2324999680,2333408256,2341847552,2350317312,2358817536,2367348480,2375910400,2384503296,2393127424,2401782528,2410468864,2419186688,2427936256,2436717056,2445529856,2454374656,2463251200,2472160000,2481101056,2490074368,2499080192,2508118528,2517189376,2526293248,2535430144,2544599808,2553802752,2563038976,2572308736,2581612032,2590948864,2600319232,2609723904,2619162368,2628634880,2638141952
	     dd 2647683072,2657259008,2666869248,2676514560,2686194688,2695909632,2705659904,2715445248,2725266176,2735122432,2745014528,2754942464,2764905984,2774905856,2784941824,2795013888,2805122560,2815267840,2825449728,2835668480,2845924096,2856216832,2866546688,2876914176,2887319040,2897761280,2908241664,2918759680,2929315840,2939910400,2950543104,2961214208,2971923968,2982672384,2993459712,3004285952,3015151360,3026056192,3037000448,3047984384,3059007744,3070071296,3081174784,3092318208,3103502080,3114726400,3125991424,3137297152,3148643584,3160031232,3171460096,3182930176,3194441728,3205995008,3217590016,3229227008,3240905984,3252627200,3264390912,3276197120,3288046080,3299937792,3311872512,3323850496,3335871744,3347936512,3360044800,3372196864,3384393216,3396633344,3408917760,3421246720,3433620224,3446038528,3458501632,3471009792,3483563264,3496162304,3508806656,3521496832,3534233088,3547015168,3559843584,3572718336
	     dd 3585639680,3598607616,3611622656,3624684544,3637793792,3650950656,3664154880,3677406976,3690706944,3704054784,3717451264,3730896128,3744389376,3757931520,3771522816,3785163008,3798852864,3812591872,3826380800,3840219648,3854108416,3868047360,3882036736,3896076800,3910167808,3924309504,3938502400,3952746496,3967042304,3981389824,3995789312,4010240768,4024744448,4039300608,4053909248
else
LinFreqTable dd 0
ENDIF

pt_VibratoTable db	  0, 24, 49, 74, 97,120,141,161
		db	180,197,212,224,235,244,250,253
		db	255,253,250,244,235,224,212,197
		db	180,161,141,120, 97, 74, 49, 24

starta:
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ NewRow ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
UpdateNewRow:
	cmp	GotoRow,-1		;Check for Row Jump
	jz	NoRowJump
	mov	ax,GotoRow
	mov	CurrRow,ax
NoRowJump:

	cmp	PositionJump,-1 	;Check for Pos Jump
	jz	NoPositionJump
	movzx	ecx,PositionJump
	cmp	CurrPosition,cx
	jbe	@@Skutt
	mov	SongFinished,2
@@Skutt:
	mov	CurrPosition,cx
NoPositionJump:
	cmp	GotoRow,-1
	jnz	Yes
	cmp	PositionJump,-1
	jz	No
Yes:
	cmp	PatternPlay,0
	jz	NoPattPlay
	movzx	ebx,CurrPatt2
	call	PattInit
	jmp	PattPlay
NoPattPlay:
	call	PosInit
PattPlay:
;	mov	GotoRow,-1
;	mov	PositionJump,-1
	jmp	NewRow
No:
;	mov	GotoRow,-1
;	mov	PositionJump,-1

	dec	PatternDelay
	jg	NewRow

	movzx	ebx,CurrPatt2
	mov	eax,[AllocTable+ebx*8]
	cmp	eax,0
	jnz	NoEmptyPatt3
	mov	eax,EmptyPattern
NoEmptyPatt3:
	movzx	cx,[eax+10]
	inc	CurrRow
	cmp	CurrRow,cx
	jbe	NewRow
	mov	CurrRow,0

	cmp	PatternPlay,0		;If only play one pattern
	jz	@@NextPattern
	movzx	ebx,CurrPatt2
	call	PattInit
	jmp	@@OnePattern
@@NextPattern:
	inc	CurrPosition
	call	PosInit
@@OnePattern:
	cmp	CurrPosition,0
	jnz	NewRow
	cmp	CurrRow,0
	jnz	NewRow

	lea	esi,PanPosition_Orig
	lea	edi,PanPosition
	mov	ecx,8
	rep	movsd

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Read Channels ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;Exxxxxxxxxxxxxxxxtra large
NewRow:
	cmp	TuneStopped,1
	jz	_Ret

	mov	CMDB_DFix,0
	mov	GotoRow,-1
	mov	PositionJump,-1

	cmp	PatternDelay,0
	jle	NoPatternDelay

	xor	edi,edi
	movzx	ecx,Channels
PatternDelayLoop:
	push	ecx

	xor	ebp,ebp
Multiple3:
	shl	edi,4
	mov	ax,ds:[Command+ebp*2+edi]	;Command+ebp*2+edi*16
;	mov	cx,ax
	shr	edi,4			;11,12,EA0,EB0,E10,E20
	xor	edx,edx
	call	FixRowCommands
	bts	EnvVibCheck,edi
	mov	al,[Volume+edi]
	mov	[CurrVolume+edi],al
	bts	EnvVolCheck,edi
;DoMore:
	inc	ebp
	cmp	ebp,Dword Ptr Commands
	jnz	Multiple3

	pop	ecx
	inc	edi
	loop	PatternDelayLoop
	ret

NoPatternDelay:
	mov	PatternDelay,0

	xor	edi,edi
	movzx	ecx,Channels
	mov	esi,PatternOffset		;Get it
UpdateRowsLoop:
	push	ecx
	push	esi
	xor	edx,edx
	xor	ebx,ebx
	bts	Inst0,edi
	cmp	[Mute+edi],1
	jz	MuteMe
	mov	dl,[esi]			;Get pattdata
	and	dx,7fh
	mov	bl,[esi+1]
	or	[SkipFlag+edi*2],00006h

	cmp	edx,1				;A KeyOff Note??
	jnz	NoKeyOffNote
	mov	[KeyOffTable+edi],0
	pushad
	movzx	ebx,[CurrInst+edi]
	GetOffset ebx,edx,ENV_Flags
	bt	word ptr [edx],2		;Check Envelope ON
	jc	DontStopTheVoice
	mov	cx,di
	inc	cx
	call	StopOneVoice
DontStopTheVoice:
	popad
	mov	edx,0

NoKeyOffNote:
	mov	RealNote,dl
	call	GetSplitCurrSample		;Get Rel.Note+SplitSample

	xor	ebp,ebp
SpecialPortCheck:
	mov	ax,ds:[esi+ebp*2+2]
	and	al,3fh
	cmp	al,3
	jz	SetOldInst
	cmp	al,5
	jz	SetOldInst
	inc	ebp
	cmp	ebp,Dword Ptr Commands
	jb	SpecialPortCheck

	mov	[CurrSample+edi*2],bx
	mov	ax,bx
	shr	ax,4
	mov	[CurrInst+edi],al
MuteMe:
	call	SetFineTune

	and	dx,7fh				;Clear Nr Of Commands
	jz	NoNote

	and	[SkipFlag+edi*2],0fff1h
	mov	[KeyOffTable+edi],1
	mov	[SlideTable+edi*4],0

NoNote:
	bt	Inst0,edi
	jnc	SetNewInst

	cmp	dx,0
	jz	CheckCommands
	and	[SkipFlag+edi*2],0fffeh
	mov	al,[Volume+edi]
	mov	[Vol+edi],al
	jmp	CheckCommands
SetOldInst:
	movzx	ebx,[CurrSample+edi*2]
	cmp	dx,0
	jz	CheckCommands
	mov	[KeyOffTable+edi],1
	jmp	NoNote
SetNewInst:
	and	[SkipFlag+edi*2],0fffeh
	mov	al,[Volumes+ebx]
	mov	[Volume+edi],al
	mov	[Vol+edi],al

	mov	[ENV_SpdCounter+edi],-1
	mov	[ENV_VInterPol+edi*2],-1
	mov	[ENV_CurrVPoint+edi],0
	mov	[ENV_VolInfo+edi*4],0
	mov	[ENV_FadeCounter+edi*4],0ffffh

CheckCommands:
	add	esi,2
	xor	ebp,ebp
MultipleCommands:
	lodsw
	xchg	al,ah		;Bx=SampNr, Ax=Command, Dx=Note
	and	ax,3fffh	;Clear NOC
	shl	edi,4
	mov	ds:[Command+ebp*2+edi],ax
	shr	edi,4
	cmp	ax,0
	jz	NextCommand
	call	FixRowCommands
NextCommand:
	inc	ebp
	cmp	ebp,Dword Ptr Commands
	jb	MultipleCommands

	test	[SkipFlag+edi*2],00002h
	jnz	NoNote2
	cmp	dx,0
	jz	NoNote2

	mov	[CurrNoteTable+edi],dl
	mov	[Note+edi],dl
	mov	dl,RealNote
	mov	[R_CurrNoteTable+edi],dl
	mov	[R_Note+edi],dl

	mov	[ENV_PSpdCounter+edi],-1
	mov	[ENV_PInterPol+edi*2],-1
	mov	[ENV_CurrPPoint+edi],0
	mov	[ENV_PanInfo+edi*4],0
	mov	[EnvPanPot+edi],128

	mov	[ENV_BSpdCounter+edi],-1
	mov	[ENV_BInterPol+edi*2],-1
	mov	[ENV_CurrBPoint+edi],0
	mov	[ENV_VibInfo+edi*4],0
	mov	[VibPeriod+edi*2],0

NoNote2:
	cmp	[Mute+edi],1
	jnz	NoMute
	mov	[SkipFlag+edi*2],0fh
	btr	EnvVibCheck,edi
	btr	EnvPanCheck,edi
	btr	EnvVolCheck,edi
NoMute:
	pop	esi
	pop	ecx
	inc	edi
	add	esi,RowSize
	loop	UpdateRowsLoop

	mov	esi,ChRowSize
	add	PatternOffset,esi

	xor	edi,edi
	movzx	ecx,Channels
UpdateLoopen:
	movzx	ebx,word ptr [CurrSample+edi*2]

	mov	ax,[SkipFlag+edi*2]	;Check Arp.
	shr	ax,8
	and	ax,3
	cmp	ax,1
	jnz	SkipNote
	mov	dl,[R_Note+edi]
	mov	[R_CurrNoteTable+edi],dl
	mov	dl,[Note+edi]
	mov	[CurrNoteTable+edi],dl
	bts	EnvVibCheck,edi
SkipNote:
	and	[SkipFlag+edi*2],0fcffh
	and	ax,2
	shl	ax,7
	or	[SkipFlag+edi*2],ax

	mov	ax,[SkipFlag+edi*2]	;Check Vib.
	shr	ax,4
	and	ax,3
	cmp	ax,1
	jz	SetFrequency

	test	[SkipFlag+edi*2],00002h
	jnz	SkipFrequency
SetFrequency:
	mov	[VibratoTable+edi*2],0
	bts	EnvVibCheck,edi
SkipFrequency:
	and	[SkipFlag+edi*2],0ffcfh
	and	ax,2
	shl	ax,3
	or	[SkipFlag+edi*2],ax

	mov	ax,[SkipFlag+edi*2]	;Check Tre.
	shr	ax,6
	and	ax,3
	cmp	ax,1
	jz	SetVolume1

	test	[SkipFlag+edi*2],00001h
	jnz	SkipVolume
SetVolume1:
	mov	dl,[Volume+edi]
	mov	[CurrVolume+edi],dl
	bts	EnvVolCheck,edi
	or	[SkipFlag+edi*2],00001h
SkipVolume:
	and	[SkipFlag+edi*2],0ff3fh
	and	ax,2
	shl	ax,5
	or	[SkipFlag+edi*2],ax

	test	[SkipFlag+edi*2],00004h ;Check Voice
	jnz	SkipPlayVoice
	Call	PlayVoice
SkipPlayVoice:
	inc	edi
	loop	UpdateLoopen

	mov	al,PatternDelay2
	mov	PatternDelay,al
	mov	PatternDelay2,0
	mov	SpecialBreakByte,0
	ret

SetVolume	Proc	Near
	pushad
	and	eax,0ffh
	movzx	ebp,MasterVolume
	mul	ebp
	movzx	ebp,GlobalVolume
	mul	ebp
	movzx	ebp,[ChannelMaster+edi]
	mul	ebp
	mov	ebp,127
	movzx	ebx,[CurrInst+edi]
	push	ebx
	GetOffset ebx,ebx,ENV_Flags
	bt	word ptr [ebx],2
	pop	ebx
	jnc	NoEnvelope
	movzx	ebp,[EnvVolume+edi]
NoEnvelope:
	mul	ebp
	mov	ebp,127*127*127*127
	div	ebp
	mov	ebp,[ENV_FadeCounter+edi*4]
	mul	ebp
	shr	eax,16
	call	[SetVolumeTBL]
	popad
	ret
SetVolume	EndP

irq_stub_buf	db	21 dup(?)	;buffers for IRQ callback stub
Old_RM_Vec	df	0
Old_PM_Vec	df	0

StartInts	Proc Near
	pushad
	pushf
	cld
	cli

	xor	bl,bl			;Get Old IRQ0 Vector
	call	_getirqvect
	mov	dword ptr Old_PM_Vec,edx
	mov	word ptr Old_PM_Vec+4,cx

	xor	bl,bl			;Set New IRQ0 Vector
	lea	edx,AMSPlay
	mov	cx,cs
	call	_setirqvect

IF TRANVERSION		;\\
	xor	bl,bl			;Set New Real Mode IRQ0 Vector
	mov	edx,offset AMSPlay
	mov	edi,offset irq_stub_buf ;set real mode IRQ 0 callback
	call	_rmpmirqset
	mov	Dword ptr Old_RM_Vec,eax	  ;store old real mode IRQ 0 vector
ENDIF			;//

	mov	bx,TimerRate
	mov	al,34h
	out	43h,al
	mov	al,bl
	out	40h,al
	mov	al,bh
	out	40h,al

	mov	al,TuneStoppedSave
	mov	TuneStopped,al

	popf
	popad
	ret
StartInts	EndP

StopInts	Proc Near
	pushad
	pushf
	cld
	cli

	xor	bl,bl			;Set Old IRQ0 Vector
	mov	edx,dword ptr Old_PM_Vec
	mov	cx,word ptr Old_PM_Vec+4
	call	_setirqvect

IF TRANVERSION		;\\
	xor	bl,bl				;Set Old IRQ0 Vector
	mov	eax,Dword ptr Old_RM_Vec	;Restore old real mode IRQ 0 vector
	call	_rmpmirqfree
ENDIF			;//

	mov	al,36h
	out	43h,al
	xor	ax,ax
	out	40h,al
	nop
	nop
	out	40h,al
	call	SetRealTimer

	mov	al,TuneStopped
	mov	TuneStoppedSave,al
	mov	TuneStopped,1

	popf
	popad
	ret
StopInts	EndP


;call:dx=Note, al=Current FineTune
E_SetFineTune:
	pushad
	jmp	ContFineTune

;call:dx=Note, ebx=Current Sample
SetFineTune	Proc	Near
	pushad
	and	edx,0ffh
	jz	QuitSetFineTune
	mov	al,[FineTunes+ebx]	;Check finetune
ContFineTune:
	and	ax,0fh			;Remove PanPosition
	jz	ResetFineTune

	cmp	LinFreq,1
	jz	LinFineTune

	sub	dx,2
	cmp	al,7
	ja	Negative
	ConvertNote edx esi
	inc	edx
	ConvertNote edx edx
	sub	esi,edx
	mul	si
	shr	ax,3
	neg	ax
	mov	[FineTuneTable+edi*2],ax
	jmp	QuitSetFineTune
Negative:
	sub	al,8
	mov	ah,8
	sub	ah,al
	shr	ax,8
	dec	edx
	ConvertNote edx esi
	inc	edx
	ConvertNote edx edx
	sub	esi,edx
	mul	si
	shr	ax,3
ResetFineTune:
	mov	[FineTuneTable+edi*2],ax
QuitSetFineTune:
	popad
	ret

LinFineTune:
	cmp	al,7
	ja	NegativeLin
	shl	ax,5
	neg	ax
	mov	[FineTuneTable+edi*2],ax
	jmp	QuitSetFineTune
NegativeLin:
	sub	al,16
	cbw
	shl	ax,5
	neg	ax
	mov	[FineTuneTable+edi*2],ax
	jmp	QuitSetFineTune
SetFineTune Endp

ErrorHandler:
	call	_CloseFile
	and	eax,0ffffh
	mov	esp,StackSave
	mov	[esp+32],eax
	popf
	popad
	stc
	ret

ClearMod	Proc	Near
	pushad
	pushf

	mov	ecx,1031
	xor	ebp,ebp
DisallocAll:
	cmp	ebp,1026
	jz	SkipClip
	call	MemDisalloc
SkipClip:
	inc	ebp
	loop	DisallocAll

;	mov	ecx,1051-1046+1
;	mov	ebp,1046
;ClearEffect:
;	call	MemDisalloc
;	inc	ebp
;	loop	ClearEffect

	call	ClearTheSamples

	mov	ecx,EndClear
	sub	ecx,StartClear
	sub	ecx,4
	lea	edi,StartClear+4
	mov	al,0
	rep	stosb

	lea	edi,ChannelMaster	;Reset MasterVols
	mov	ecx,32
	mov	al,7fh
	rep	stosb

	mov	GlobalVolume,127	;Reset Global Vol

	mov	al,DefaultChannels
	mov	Channels,al
	mov	AllocChannels,al
	mov	al,DefaultCommands
	mov	Commands,al
	mov	Positions,1
	mov	Hertzmain,0
	mov	PositionJump,-1
	mov	GoToRow,-1
	mov	ModSpeed,6
	mov	ModTempo,7d00h
	mov	HertzAdder,7d00h
	mov	Pt_Counter,5
	mov	TuneStopped,1
	mov	CurrPatt,0
	mov	CurrPatt2,0
	mov	Samples,1
	mov	Sample0,0

	lea	edi,PanPosition_Orig
	mov	eax,40b0b040h
	mov	ecx,8
	rep	stosd

	lea	esi,PanPosition_Orig
	lea	edi,PanPosition
	mov	ecx,8
	rep	movsd

	lea	esi,PanPosition_Orig
	lea	edi,CurrentChannelPanPot
	mov	ecx,8
	rep	movsd
	mov	EnvPanCheck,-1

	mov	edi,ChannelNamesPtr	;Clear ChannelNames
	mov	ecx,11*64
	xor	al,al
	rep	stosb

	lea	edi,Composer		;Clear Composername
	mov	ecx,30
	xor	al,al
	rep	stosb

	mov	eax,74			;Clear Desc
	mov	ebp,1027
	mov	ebx,1
	call	MemAlloc
IFE	PLAYER
	mov	[DescTable+11*4],eax	;Ptr
	mov	[DescTable+12*4],74	;Len
ENDIF

	popf
	popad
	ret
ClearMod	Endp



;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

StartTime	dd	0

IndicateTime	Proc	Near
	pushad
	mov	al,4		;Read Hour
	out	70h,al
	in	al,71h
	mov	Hour,al

	mov	al,2		;Read Min
	out	70h,al
	in	al,71h
	mov	Min,al

	mov	al,0		;Read Sec
	out	70h,al
	in	al,71h
	mov	Sec,al

	call	CalcTime

	cmp	ANewSecond,-1
	jnz	@@NoReset
	mov	StartTime,eax
@@NoReset:
	sub	eax,StartTime
	mov	ANewSecond,eax

	popad
	ret
IndicateTime	EndP

Hour	db	0
Min	db	0
Sec	db	0

;Y=X+(X/10*6) HEX to decimal   (in a reg)
;X=Y-(Y/16*6) Decimal to HEX

SetRealTimer	Proc Near
	pushad
	mov	al,4
	out	70h,al
	in	al,71h
	mov	hour,al

	mov	al,2
	out	70h,al
	in	al,71h
	mov	min,al

	xor	ax,ax
	out	70h,al
	in	al,71h
	mov	sec,al

	call	CalcTime

	mov	ebx,1193180
	mul	ebx

	shrd	eax,edx,16
	mov	ecx,eax

	mov	esi,46ch

	mov	gs:[esi],ecx

	popad
	ret
SetRealTimer	EndP

;In: Hour, Min, Sec
;Out: eax=time in sec
CalcTime	Proc	Near
;------------------------
	mov	al,Hour
	shr	al,4
	mov	bl,6
	mul	bl
	sub	Hour,al
;------------------------
	mov	al,Min
	shr	al,4
	mov	bl,6
	mul	bl
	sub	Min,al
;------------------------
	mov	al,Sec
	shr	al,4
	mov	bl,6
	mul	bl
	sub	Sec,al

	movzx	ecx,Sec

	movzx	eax,Min
	mov	ebx,60
	mul	ebx
	add	ecx,eax

	movzx	eax,Hour
	mov	ebx,3600
	mul	ebx
	add	eax,ecx
	ret
CalcTime	EndP

;ôÚ¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿
;³³³³³³³³³³³³³³³³³³³³ÃÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ´³³³³³³³³³³³³³³³³³³³³³³
;³³³³³³³³³³³³³³³³³³³³³ M e a n W h i l e C o m m a n d s ³³³³³³³³³³³³³³³³³³³³³³³
;³³³³³³³³³³³³³³³³³³³³ÃÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ´³³³³³³³³³³³³³³³³³³³³³³
;ÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙõ
VolRate db	0
;calls: edi=chan nr
;	ax=command

MW_CMD	dd	Fix_Arpeggio_Old		;0
	dd	Fix_PortamentoUp_Old		;1
	dd	Fix_PortamentoDn_Old		;2
	dd	Fix_TonePortamento_Old		;3
	dd	Fix_Vibrato_Old 		;4
	dd	NoNewPortamentoSet_Old		;5
	dd	Fix_Vibrato_Old 		;6
	dd	Fix_Tremolo_Old 		;7
	dd	EndMeanWhileCommands		;8
	dd	EndMeanWhileCommands		;9
	dd	Fix_VolumeSlide_Old		;0ah
	dd	EndMeanWhileCommands		;0bh
	dd	EndMeanWhileCommands		;0ch
	dd	EndMeanWhileCommands		;0dh
	dd	EndMeanWhileCommands		;0eh
	dd	EndMeanWhileCommands		;0fh
	dd	EndMeanWhileCommands		;10h
	dd	EndMeanWhileCommands		;11h
	dd	EndMeanWhileCommands		;12h
	dd	Fix_RetrigNoteVolSlide_Old	;13h
	dd	EndMeanWhileCommands		;14h
	dd	NoNewPortamentoSet_New		;15h
	dd	Fix_Vibrato_New 		;16h
	dd	EndMeanWhileCommands		;17h
	dd	Fix_PanSlide_Old		;18h
	dd	EndMeanWhileCommands		;19h
	dd	Fix_VolumeSlide_New		;1ah
	dd	EndMeanWhileCommands		;1bh
	dd	EndMeanWhileCommands		;1ch
	dd	EndMeanWhileCommands		;1dh
	dd	EndMeanWhileCommands		;1eh
	dd	EndMeanWhileCommands		;1fh
	dd	Fix_KeyOff_Old			;20h
	dd	Fix_PortamentoUp_New		;21h
	dd	Fix_PortamentoDn_New		;22h
	dd	EndMeanWhileCommands		;23h
	dd	EndMeanWhileCommands		;24h
	dd	EndMeanWhileCommands		;25h
	dd	EndMeanWhileCommands		;26h
	dd	EndMeanWhileCommands		;27h
	dd	EndMeanWhileCommands		;28h
	dd	EndMeanWhileCommands		;29h
	dd	Fix_GlobalVolumeSlide_Old	;2ah
LastMWCmd	equ				2ah

FixCommands	Proc	Near
	pushad
	pushf
	cmp	ah,0eh
	jz	E_Commands
	cmp	ah,LastMWCmd
	ja	EndMeanWhileCommands

	movzx	ebx,ah
	jmp	[MW_CMD+ebx*4]

E_Commands:
	shl	ax,4
	shr	al,4
	cmp	ah,0e9h
	jz	Fix_RetrigNote
	cmp	ah,0ech
	jz	Fix_NoteCut
	cmp	ah,0edh
	jz	Fix_NoteDelay

	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- 0
Fix_Arpeggio_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_Arpeggio
Fix_Arpeggio_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_Arpeggio:
	mov	dl,[Note+edi]
	mov	cx,ax

	ror	ax,4
	shr	ah,4
	add	al,dl
	add	ah,dl

	mov	[Arpeggio],dl
	mov	[Arpeggio+1],ah
	mov	[Arpeggio+2],al

	movzx	eax,pt_counter
	mov	bl,3
	div	bl
	shr	ax,8

	mov	dl,[Arpeggio+eax]
	mov	[CurrNoteTable+edi],dl

;----
	mov	dl,[R_Note+edi]

	ror	cx,4
	shr	ch,4
	add	cl,dl
	add	ch,dl

	mov	[Arpeggio],dl
	mov	[Arpeggio+1],ch
	mov	[Arpeggio+2],cl

	mov	dl,[Arpeggio+eax]
	mov	[R_CurrNoteTable+edi],dl

	bts	EnvVibCheck,edi
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- 1
Fix_PortamentoUp_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_PortamentoUp
Fix_PortamentoUp_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_PortamentoUp:
	and	eax,0ffh
	shl	eax,4
	sub	[SlideTable+edi*4],eax

	movzx	bp,[CurrNoteTable+edi]
	movzx	edx,SlideUpLimit

	call	CheckSlideUpLimit
	jnc	SetPU
	add	[SlideTable+edi*4],ebp
SetPU:
	bts	EnvVibCheck,edi
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- 2
Fix_PortamentoDn_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_PortamentoDn
Fix_PortamentoDn_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_PortamentoDn:
	and	eax,0ffh
	shl	eax,4
	add	[SlideTable+edi*4],eax

	movzx	bp,[CurrNoteTable+edi]
	movzx	edx,SlideDnLimit
	call	CheckSlideDnLimit
	jnc	SetPD
	sub	[SlideTable+edi*4],ebp
SetPD:
	bts	EnvVibCheck,edi
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- 3
Fix_TonePortamento_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_TonePortamento
Fix_TonePortamento_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_TonePortamento:
	cmp	al,0
	jz	NoNewPortamentoSet
	mov	[PortSpeed+edi],al
NoNewPortamentoSet:
	movzx	ebp,[CurrNoteTable+edi]
	cmp	bp,0
	jz	NoGliss
	movzx	edx,[PortTo+edi]
	cmp	dx,0
	jz	NoGliss

	cmp	LinFreq,1
	jz	TP_Linear

	sub	ebp,2
	sub	edx,2
	ConvertNote ebp ebp
	add	ebp,[SlideTable+edi*4]
	ConvertNote edx ebx
	add	edx,2
	cmp	ebx,ebp
	ja	PortaDN
	jmp	PortaUP
TP_Linear:
	mov	ebx,[SlideTable+edi*4]
	sar	ebx,8
	sub	ebx,ebp
	neg	ebx
	cmp	edx,ebx
	jb	PortaDn
PortaUP:
	movzx	ebx,byte ptr [PortSpeed+edi]
	shl	ebx,4
	sub	[SlideTable+edi*4],ebx
	movzx	ebp,[CurrNoteTable+edi]
	call	CheckSlideUpLimit
	jnc	TonePortUPAndVolSlide
	add	[SlideTable+edi*4],ebp
	mov	[PortTo+edi],0
	bts	EnvVibCheck,edi
	jmp	NoGliss
PortaDN:
	movzx	ebx,byte ptr [PortSpeed+edi]
	shl	ebx,4
	add	[SlideTable+edi*4],ebx
	movzx	ebp,[CurrNoteTable+edi]
	call	CheckSlideDnLimit
	jnc	TonePortDNAndVolSlide
	sub	[SlideTable+edi*4],ebp
	mov	[PortTo+edi],0
	bts	EnvVibCheck,edi
	jmp	NoGliss

TonePortDNAndVolSlide:
	bts	EnvVibCheck,edi
	bt	GlissControl,edi
	jnc	NoGliss
	mov	eax,ebp
	btr	EnvVibCheck,edi
CheckGlissDN:
	mov	ebp,eax
	call	CheckSlideDnLimit		;dx=limit, bp=base
	jnc	NoLimit
	cmp	dl,[LastGliss+edi]
	jz	NoGliss
	mov	[LastGliss+edi],dl
	sub	[SlideTable+edi*4],ebp
	bts	EnvVibCheck,edi
	jmp	NoGliss
NoLimit:
	inc	edx
	jmp	CheckGlissDN

TonePortUPAndVolSlide:
	bts	EnvVibCheck,edi
	bt	GlissControl,edi
	jnc	NoGliss
	mov	eax,ebp
	btr	EnvVibCheck,edi
CheckGlissUP:
	mov	ebp,eax
	call	CheckSlideUpLimit		;dx=limit, bp=base
	jnc	NoLimit2
	cmp	dl,[LastGliss+edi]
	jz	NoGliss
	mov	[LastGliss+edi],dl
	add	[SlideTable+edi*4],ebp
	bts	EnvVibCheck,edi
	jmp	NoGliss
NoLimit2:
	dec	edx
	jmp	CheckGlissUP

NoGliss:
	and	ah,7
	cmp	ah,5
	jz	Fix_VolumeSlide
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- 4
Fix_Vibrato_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_Vibrato
Fix_Vibrato_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_Vibrato:
	and	ah,7
	cmp	ah,6			;check if vib+vol
	jz	mt_Vibrato2
	mov	ah,al
	or	al,al
	jz	mt_Vibrato2
	mov	bl,[VibratoCmd+edi]
	and	al,0fh
	jz	mt_vibskip1
	and	bl,0F0h
	or	bl,al
mt_vibskip1:
	and	ah,0F0h
	jz	mt_vibskip2
	and	bl,0Fh
	or	bl,ah
mt_vibskip2:
	mov	[VibratoCmd+edi],bl
mt_Vibrato2:
	mov	al,[VibratoPos+edi]
	shr	al,2
	and	ax,001Fh
	mov	bl,[WaveControl+edi]
	and	bl,03h
	jz	mt_vib_sine
	shl	al,3
	cmp	bl,1
	jz	mt_vib_rampdown
	mov	bl,255
	jmp	mt_vib_set
mt_vib_rampdown:
	cmp	[VibratoPos+edi],0
	jnl	mt_vib_rampdown2
	mov	bl,255
	sub	bl,al
	jmp	mt_vib_set
mt_vib_rampdown2:
	mov	bl,al
	jmp	mt_vib_set
mt_vib_sine:
	movzx	ebx,al
	mov	bl,[pt_VibratoTable+ebx]
mt_vib_set:
	mov	al,[VibratoCmd+edi]
	and	al,0Fh
	mul	bl
	shr	ax,3
	cmp	[VibratoPos+edi],0
	jg	mt_Vibrato3
	neg	ax
mt_Vibrato3:
	mov	cl,[VibratoCmd+edi]
	shr	cx,2
	and	cx,3Ch
	add	[VibratoPos+edi],cl

	mov	[VibratoTable+edi*2],ax
	bts	EnvVibCheck,edi
	shl	edi,4
	mov	ax,ds:[Command+ebp*2+edi]
	shr	edi,4
	and	ah,7
	cmp	ah,6
	jz	Fix_VolumeSlide
	jmp	EndMeanWhileCommands

;--------------------------------------------------------------- 5

NoNewPortamentoSet_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	NoNewPortamentoSet
NoNewPortamentoSet_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
	jmp	NoNewPortamentoSet


;--------------------------------------------------------------- 7
Fix_Tremolo_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_Tremolo
Fix_Tremolo_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_Tremolo:
	or	al,al
	jz	mt_Tremolo2
	mov	bl,[TremoloCmd+edi]
	and	al,0fh
	jz	mt_treskip
	and	bl,0F0h
	or	bl,al
mt_treskip:
	shl	edi,4
	mov	al,byte ptr ds:[Command+ebp*2+edi]
	shr	edi,4
	and	al,0F0h
	jz	mt_treskip2
	and	bl,0Fh
	or	bl,al
mt_treskip2:
	mov	[TremoloCmd+edi],bl
mt_Tremolo2:
	mov	al,[TremoloPos+edi]
	shr	al,2
	and	ax,001Fh
	mov	bl,[WaveControl+edi]
	shr	bl,4
	and	bl,03h
	jz	mt_tre_sine
	shl	al,3
	cmp	bl,1
	jz	mt_tre_rampdown
	mov	bl,255
	jmp	mt_tre_set
mt_tre_rampdown:
	cmp	[TremoloPos+edi],0
	jl	mt_tre_rampdown2
	mov	bl,255
	sub	bl,al
	jmp	mt_tre_set
mt_tre_rampdown2:
	mov	bl,al
	jmp	mt_tre_set
mt_tre_sine:
	xor	ebx,ebx
	mov	bl,al
	mov	bl,[pt_VibratoTable+ebx]
mt_tre_set:
	mov	al,[TremoloCmd+edi]
	and	al,0Fh
	mul	bl
	mov	bx,ax
	shr	bx,5;6
	mov	al,[Volume+edi]
;	shr	al,1
	cmp	[TremoloPos+edi],0
	jl	mt_TremoloNeg
	add	al,bl
	jmp	mt_Tremolo3
mt_TremoloNeg:
	sub	al,bl
mt_Tremolo3:
	jnl	mt_TremoloSkip
	xor	ax,ax
mt_TremoloSkip:
	mov	[Vol+edi],al
	cmp	al,7Fh
	jb	mt_TremoloOK
	mov	al,7FH
mt_TremoloOK:
;	shl	al,1
	bts	EnvVolCheck,edi
	mov	[CurrVolume+edi],al
	mov	al,[TremoloCmd+edi]
	shr	al,2
	and	al,3Ch
	add	[TremoloPos+edi],al
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- A
Fix_VolumeSlide_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_VolumeSlide
Fix_VolumeSlide_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_VolumeSlide:
	mov	cl,VolRate
	mov	ah,al
	shr	al,4
	cmp	al,0
	jz	VolumeSlideDn
	shl	al,cl
	add	[Volume+edi],al
	cmp	[Volume+edi],127
	jb	SetSlideVolume
	mov	[Volume+edi],127
SetSlideVolume:
	mov	al,[Volume+edi]
	mov	[Vol+edi],al
	bts	EnvVolCheck,edi
	mov	[CurrVolume+edi],al
	jmp	EndMeanWhileCommands

VolumeSlideDn:
	shl	ah,cl
	sub	[Volume+edi],ah
	jg	SetSlideVolume2
	mov	[Volume+edi],0
SetSlideVolume2:
	mov	al,[Volume+edi]
;	mov	[Vol+edi],al
	bts	EnvVolCheck,edi
	mov	[CurrVolume+edi],al
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- 13
RetrigVol	db	0,-2,-4,-8,-16,-32,33,34,0,2,4,8,16,32,35,36
Fix_RetrigNoteVolSlide_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_RetrigNoteVolSlide
Fix_RetrigNoteVolSlide_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_RetrigNoteVolSlide:
	cmp	al,0
	jnz	NewRetrig
	mov	al,[RetrigSave+edi]
NewRetrig:
	mov	[RetrigSave+edi],al

	mov	cl,al
	mov	bl,al
	and	bl,0fh
	jz	EndMeanWhileCommands
	movzx	ax,pt_counter
	div	bl
	push	ax bx
;	cmp	pt_counter,1
;	jz	LeftField
	cmp	ah,0
	jnz	DontRetrig1
LeftField:

	mov	al,cl
	shr	al,4
	movzx	eax,al
	movsx	cx,byte ptr [RetrigVol+eax]
	movzx	ax,byte ptr [Volume+edi]
	cmp	cx,32
	jle	LinearSlide
	cmp	cx,33
	jz	Fix23
	cmp	cx,34
	jz	Fix12
	cmp	cx,35
	jz	Fix32
	shl	ax,1
	jmp	Nig1
Fix23:
	shl	ax,1
	xor	dx,dx
	mov	bx,3
	div	bx
	jmp	Nig1
Fix32:
	mov	bx,3
	mul	bx
Fix12:
	shr	ax,1
	jmp	Nig1

LinearSlide:
	add	ax,cx
	jg	Nig1
	mov	al,0
Nig1:
	cmp	al,127
	jbe	AllRight2
	mov	al,127
AllRight2:
	mov	[Volume+edi],al
	mov	[Vol+edi],al
	bts	EnvVolCheck,edi
	mov	[CurrVolume+edi],al
	mov	bx,[Currsample+edi*2]
	call	PlayVoice
	and	[SkipFlag+edi*2],0fffbh
DontRetrig1:
	pop	bx ax
	jmp	DontRetrig
;--------------------------------------------------------------- 18
Fix_PanSlide_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_PanSlide
Fix_PanSlide_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_PanSlide:
	cmp	SkipPanPot,1
	jz	EndRowCommands
	test	al,0fh
	jz	PanSlideLeft
	and	al,0fh
	add	[CurrentChannelPanPot+edi],al
	jnc	PanOk
	mov	[CurrentChannelPanPot+edi],255
	jmp	PanOk

PanSlideLeft:
	shr	al,4
	sub	[CurrentChannelPanPot+edi],al
	jnc	PanOk
	mov	[CurrentChannelPanPot+edi],0

PanOk:
	bts	EnvPanCheck,edi
	jmp	EndRowCommands
;--------------------------------------------------------------- 20
Fix_KeyOff_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_KeyOff
Fix_KeyOff_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_KeyOff:
	cmp	al,pt_counter
	jnz	EndMeanWhileCommands
	mov	[KeyOffTable+edi],0
	jmp	EndMeanWhileCommands

;--------------------------------------------------------------- 2A
Fix_GlobalVolumeSlide_Old:
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38
	jmp	Fix_GlobalVolumeSlide
Fix_GlobalVolumeSlide_New:
	mov	VolRate,0		;Extended commands
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
Fix_GlobalVolumeSlide:
	mov	ah,al
	shr	al,4
	cmp	al,0
	jz	GVolumeSlideDn
	add	GlobalVolume,al
	cmp	GlobalVolume,127
	jb	SetSlideGVolume
	mov	GlobalVolume,127
SetSlideGVolume:
	mov	EnvVolCheck,-1
	jmp	EndMeanWhileCommands

GVolumeSlideDn:
	sub	GlobalVolume,ah
	jg	SetSlideGVolume2
	mov	GlobalVolume,0
SetSlideGVolume2:
	mov	EnvVolCheck,-1
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- E9
Fix_RetrigNote:
	cmp	al,0
	jz	EndMeanWhileCommands
	mov	bl,al
	movzx	ax,pt_counter
	div	bl
	cmp	ah,0
	jnz	DontRetrig
	push	bx
	mov	bx,[Currsample+edi*2]
	call	PlayVoice
	bts	EnvVolCheck,edi
	and	[SkipFlag+edi*2],0fffbh
	pop	bx
DontRetrig:
	mov	bh,pt_counter
	inc	bh
	cmp	bh,ModSpeed
	jz	EndMeanWhileCommands
	dec	bl
	cmp	bl,ah
	jz	PrepareERamp
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- EC
Fix_NoteCut:
	cmp	al,pt_counter
	jnz	EndMeanWhileCommands
	mov	[Volume+edi],0
	mov	[Vol+edi],0
	mov	al,0
	bts	EnvVolCheck,edi
	mov	[CurrVolume+edi],al
	jmp	EndMeanWhileCommands
;--------------------------------------------------------------- ED
NoteDelayCheck	dd	0
Fix_NoteDelay:
	movzx	cx,[Note+edi]
	jcxz	EndMeanWhileCommands
	bt	NoteDelayCheck,edi
	jnc	EndMeanWhileCommands

	mov	ah,pt_counter
	inc	ah
	cmp	ah,al
	jz	PrepareERamp
	cmp	al,pt_counter
	jnz	EndMeanWhileCommands
	btr	NoteDelayCheck,edi

	mov	bx,[Currsample+edi*2]
	mov	ax,bx
	shr	ax,4
	mov	[CurrInst+edi],al
	bts	EnvVibCheck,edi
	bts	EnvVolCheck,edi
	mov	al,[Note+edi]
	mov	[CurrNoteTable+edi],al
	mov	al,[R_Note+edi]
	mov	[R_CurrNoteTable+edi],al

	mov	[ENV_PSpdCounter+edi],-1
	mov	[ENV_PInterPol+edi*2],-1
	mov	[ENV_CurrPPoint+edi],0
	mov	[ENV_PanInfo+edi*4],0
	mov	[EnvPanPot+edi],128

	mov	[ENV_BSpdCounter+edi],-1
	mov	[ENV_BInterPol+edi*2],-1
	mov	[ENV_CurrBPoint+edi],0
	mov	[ENV_VibInfo+edi*4],0
	mov	[VibPeriod+edi*2],0
	mov	[SlideTable+edi*4],0

;	cmp	SkipPanPot,1
;	jz	@@Skip
	btr	EnvPanCheck,edi
;@@Skip:

	call	PlayVoice
	and	[SkipFlag+edi*2],0fffbh
	jmp	EndMeanWhileCommands

PrepareERamp:
	cmp	ah,ModSpeed
	jz	EndMeanWhileCommands
	mov	[ERampDownTable+edi],1
	mov	DoERamp,1
	jmp	EndMeanWhileCommands

EndMeanWhileCommands:

	popf
	popad
	ret
FixCommands	 endP

; Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú¿Ú
;³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³ÃÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁ´³³³³³³³³³³³³³³³³³³³³³³³³³
;³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³ R o w C o m m a n d s ³³³³³³³³³³³³³³³³³³³³³³³³³³
;³³³³³³³³³³³³³³³³³³³³³³³³³³³³³³ÃÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ´³³³³³³³³³³³³³³³³³³³³³³³³³
;ÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙÀÙ

SlideUpLimit	db	0
SlideDnLimit	db	0

Row_CMD dd	Fix_PrepareArpeggio		;0
	dd	EndRowCommands			;1
	dd	EndRowCommands			;2
	dd	Fix_PrepareTonePortamento	;3
	dd	Fix_PrepareVibrato		;4
	dd	Fix_PrepareTonePortamento	;5
	dd	Fix_PrepareVibrato		;6
	dd	Fix_PrepareTremolo		;7
	dd	Fix_PanPosition 		;8
	dd	Fix_SampleOffset		;9
	dd	EndRowCommands			;0ah
	dd	Fix_PosJump			;0bh
	dd	Fix_Volume			;0ch
	dd	Fix_PatternBreak		;0dh
	dd	EndRowCommands			;0eh
	dd	Fix_Speed			;0fh
	dd	Fix_Direction			;10h
	dd	Fix_ExtraFineSlideUp		;11h	!
	dd	Fix_ExtraFineSlideDn		;12h	!
	dd	EndRowCommands			;13h
	dd	EndRowCommands			;14h
	dd	EndRowCommands			;15h
	dd	Fix_PrepareVibrato		;16h
	dd	EndRowCommands			;17h
	dd	EndRowCommands			;18h
	dd	EndRowCommands			;19h
	dd	EndRowCommands			;1ah
	dd	EndRowCommands			;1bh
	dd	Fix_ChannelMasterVolume 	;1ch
	dd	Fix_LongPatternBreak		;1dh
	dd	EndRowCommands			;1eh
	dd	Fix_BPMDecimal			;1fh
	dd	Fix_KeyOffRow			;20h
	dd	EndRowCommands			;21h
	dd	EndRowCommands			;22h
	dd	Fix_VolEnvelopeJump		;23h
	dd	Fix_PanEnvelopeJump		;24h
	dd	Fix_VibEnvelopeJump		;25h
	dd	EndRowCommands			;26h
	dd	EndRowCommands			;27h
	dd	EndRowCommands			;28h
	dd	EndRowCommands			;29h
	dd	EndRowCommands			;2ah
	dd	EndRowCommands			;2bh
	dd	Fix_GlobalMasterVolume		;2ch
	dd	EndRowCommands			;2dh
	dd	EndRowCommands			;2eh
	dd	EndRowCommands			;2fh
	dd	EndRowCommands			;30h
	dd	EndRowCommands			;31h
	dd	EndRowCommands			;32h
	dd	EndRowCommands			;33h
	dd	EndRowCommands			;34h
	dd	EndRowCommands			;35h
	dd	EndRowCommands			;36h
	dd	EndRowCommands			;37h
	dd	EndRowCommands			;38h
	dd	EndRowCommands			;39h
	dd	EndRowCommands			;3ah
	dd	EndRowCommands			;3bh
	dd	EndRowCommands			;3ch
	dd	EndRowCommands			;3dh
	dd	EndRowCommands			;3eh
	dd	Fix_SyncByte			;3fh

E_CMD	dd	Fix_Filter			;00h
	dd	Fix_FineSlideUp 		;01h	!
	dd	Fix_FineSlideDn 		;02h	!
	dd	Fix_GlissandoControl		;03h
	dd	Fix_VibratoControl		;04h
	dd	Fix_FineTune			;05h
	dd	Fix_Loop			;06h
	dd	Fix_TremoloControl		;07h
	dd	Fix_BreakLoop			;08h
	dd	EndRowCommands			;09h
	dd	Fix_FineVolumeSlideUp		;0ah	!
	dd	Fix_FineVolumeSlideDn		;0bh	!
	dd	EndRowCommands			;0ch
	dd	Fix_NoteDelay_Prepare		;0dh
	dd	Fix_PatternDelay		;0eh
	dd	EndRowCommands			;0fh

;AX=Command
;BX=CurrSample
;DX=Note
;EDI=Channel
FixRowCommands	Proc	Near
	pushad
	pushf

	cmp	PatternDelay,0
	jle	NoPattD
	cmp	ah,11h
	jz	NoPattD
	cmp	ah,12h
	jz	NoPattD
	mov	cl,ah
	and	cl,0fh
	cmp	cl,0eh
	jnz	EndRowCommands
	mov	cl,al
	shr	cl,4
	cmp	cl,1
	jz	NoPattD
	cmp	cl,2
	jz	NoPattD
	cmp	cl,0ah
	jz	NoPattD
	cmp	cl,0bh
	jz	NoPattD
	jmp	EndRowCommands
NoPattD:
	cmp	ah,3fh
	ja	EndRowCommands

	cmp	ah,01eh
	jnz	NoExtended1
	mov	VolRate,0
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2
	jmp	E_Commands1

NoExtended1:
	cmp	ah,0eh
	jnz	NormalCMD
	mov	VolRate,1
	mov	SlideUpLimit,73
	mov	SlideDnLimit,38

E_Commands1:
	shl	ax,4
	shr	al,4
	and	ah,0fh
	movzx	ebp,ah
	jmp	ds:[E_CMD+ebp*4]
NormalCMD:
	movzx	ebp,ah
	jmp	ds:[Row_CMD+ebp*4]

;--------------------------------------------------------------- 0
Fix_PrepareArpeggio:
	or	[SkipFlag+edi*2],00200h
	jmp	EndRowCommands
;--------------------------------------------------------------- 3
Fix_PrepareTonePortamento:
	or	[SkipFlag+edi*2],00006h
	cmp	dx,0
	jz	EndRowCommands

	movzx	ebx,[CurrInst+edi]		;Old Inst
	mov	dl,RealNote			;Unsplitted note
	call	GetSplitCurrSample		;Split OLD note
	call	SetFineTune			;etc

	mov	[PortTo+edi],dl
	jmp	EndRowCommands
;--------------------------------------------------------------- 4
Fix_PrepareVibrato:
	or	[SkipFlag+edi*2],00020h
	cmp	dx,0
	jz	EndRowCommands
	test	[WaveControl+edi],00000100b
	jnz	EndRowCommands
	mov	[VibratoPos+edi],0
	jmp	EndRowCommands
;--------------------------------------------------------------- 7
Fix_PrepareTremolo:
	or	[SkipFlag+edi*2],00080h
	cmp	dx,0
	jz	EndRowCommands
	mov	[TremoloPos+edi],0
	jmp	EndRowCommands
;--------------------------------------------------------------- 8
Fix_PanPosition:
	cmp	SkipPanPot,1
	jz	EndRowCommands
	mov	ah,al
	and	al,0fh
	cmp	PanMax,15
	jz	Noffe
	cmp	ah,0
	jz	Noffe2
	dec	ah
	shr	ax,11
	jg	Noffe
Noffe2:
	mov	al,0
Noffe:
	shl	al,4
	mov	[CurrentChannelPanPot+edi],al
	mov	[PanPosition+edi],al
	bts	EnvPanCheck,edi
	jmp	EndRowCommands
;--------------------------------------------------------------- 9
Fix_SampleOffset:
	cmp	dx,0
	jz	EndRowCommands
	cmp	al,0
	jz	NoNewSO
	mov	[SampOffset+edi],al
NoNewSO:
	or	[SkipFlag+edi*2],00008h
	jmp	EndRowCommands

;--------------------------------------------------------------- B
CMDB_DFix	dw	0	;bit 0=CMD B, bit 1=CMD D, bit 2=CMD E6
Fix_PosJump:
	bt	CMDB_DFix,2	;If Loop Command
	jc	EndRowCommands
	bt	CMDB_DFix,1
	jc	@@NoFiks
	mov	GotoRow,0
@@NoFiks:
	bts	CMDB_DFix,0
	cmp	PatternPlay,1
	jz	EndRowCommands
	xor	ah,ah
	mov	PositionJump,ax
	jmp	EndRowCommands
;--------------------------------------------------------------- C
Fix_Volume:
	cmp	al,127
	jbe	AllRight
	mov	al,127
AllRight:
	mov	[Volume+edi],al
	mov	[Vol+edi],al
	and	[SkipFlag+edi*2],0fffeh
	jmp	EndRowCommands

;--------------------------------------------------------------- D
Fix_PatternBreak:
	bt	CMDB_DFix,2	;If Loop Command
	jc	EndRowCommands

	and	ax,0ffh
	mov	cx,ax
	shl	cx,4
	shr	cl,4
	mov	al,10
	mul	ch
	add	al,cl
	and	ax,63
	mov	GotoRow,ax
	bts	CMDB_DFix,1

	cmp	PatternPlay,1
	jz	EndRowCommands

	bt	CMDB_DFix,0
	jc	EndRowCommands

	mov	ax,CurrPosition
	inc	ax
	mov	PositionJump,ax
	jmp	EndRowCommands
;--------------------------------------------------------------- 10
Fix_Direction:
	call	[Cmd10TBL]
	jmp	EndRowCommands

;--------------------------------------------------------------- 11
Fix_ExtraFineSlideUp:
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2

	movzx	ax,al
;	shl	ax,4
	mov	bx,4
	xor	dx,dx
	div	bx
	shl	dx,2
	shl	ax,4
	add	al,dl
	add	[ExtraFS+edi],al
	mov	al,[ExtraFS+edi]
	and	[ExtraFS+edi],0fh
	shr	al,4
	jmp	Fix_FineSlideUp
;--------------------------------------------------------------- 12
Fix_ExtraFineSlideDn:
	mov	SlideUpLimit,121
	mov	SlideDnLimit,2

	movzx	ax,al
;	shl	ax,4
	mov	bx,4
	xor	dx,dx
	div	bx
	shl	dx,2
	shl	ax,4
	add	al,dl
	add	[ExtraFS+edi],al
	mov	al,[ExtraFS+edi]
	and	[ExtraFS+edi],0fh
	shr	al,4
	jmp	Fix_FineSlideDn


;--------------------------------------------------------------- 1C
Fix_ChannelMasterVolume:
	cmp	al,7fh
	jbe	From
	mov	al,7fh
From:
	mov	[ChannelMaster+edi],al
	and	[SkipFlag+edi*2],0fffeh
	jmp	EndRowCommands

;--------------------------------------------------------------- 1D
Fix_LongPatternBreak:
	and	ax,0ffh
	mov	GotoRow,ax
	bts	CMDB_DFix,1

	cmp	PatternPlay,1
	jz	EndRowCommands

	bt	CMDB_DFix,0
	jc	EndRowCommands

	mov	ax,CurrPosition
	inc	ax
	mov	PositionJump,ax
	jmp	EndRowCommands
;--------------------------------------------------------------- 20
Fix_KeyOffRow:
	cmp	al,0
	jnz	EndRowCommands
	mov	[KeyOffTable+edi],0
	jmp	EndRowCommands

;--------------------------------------------------------------- 23
Fix_VolEnvelopeJump:
	movzx	ebx,[CurrInst+edi]		;Inst
	GetOffset ebx,edx,ENV_NrVolPoints
	mov	dl,[edx]
	cmp	al,dl
	ja	EndRowCommands
	inc	al
	mov	[ENV_CurrVPoint+edi],al

	GetOffset ebx,eax,ENV_VolPoints
	movzx	edx,byte ptr [ENV_CurrVPoint+edi]
	lea	edx,[edx+edx*2]
	add	eax,edx
	mov	dl,[eax-1]
	mov	[ENV_LastVol+edi],dl
	mov	dh,[eax+2]
	sub	dh,dl
	movsx	dx,dh
	mov	word ptr [ENV_VolInfo+edi*4+2],dx
	mov	dx,word ptr [eax]
	mov	word ptr [ENV_VolInfo+edi*4],dx
	mov	[ENV_VInterPol+edi*2],0

	jmp	EndRowCommands

;--------------------------------------------------------------- 24
Fix_PanEnvelopeJump:
	movzx	ebx,[CurrInst+edi]		;Inst
	GetOffset ebx,edx,ENV_NrPanPoints
	mov	dl,[edx]
	cmp	al,dl
	ja	EndRowCommands
	inc	al
	mov	[ENV_CurrPPoint+edi],al

	GetOffset ebx,eax,ENV_PanPoints
	movzx	edx,[ENV_CurrPPoint+edi]
	lea	edx,[edx+edx*2]
	add	eax,edx
	movzx	dx,byte ptr [eax-1]
	mov	[ENV_LastPan+edi*2],dx
	mov	si,word ptr [eax]
	shl	esi,16
	movzx	si,byte ptr [eax+2]
	sub	si,dx
	rol	esi,16
	mov	[ENV_PanInfo+edi*4],esi
	mov	[ENV_PInterPol+edi*2],0
	jmp	EndRowCommands

;--------------------------------------------------------------- 25
Fix_VibEnvelopeJump:
	movzx	ebx,[CurrInst+edi]		;Inst
	GetOffset ebx,edx,ENV_NrVibPoints
	mov	dl,[edx]
	cmp	al,dl
	ja	EndRowCommands
	inc	al
	mov	[ENV_CurrBPoint+edi],al

	GetOffset ebx,eax,ENV_VibPoints
	movzx	edx,[ENV_CurrBPoint+edi]
	lea	edx,[edx+edx*2]
	add	eax,edx
	movzx	dx,byte ptr [eax-1]
	mov	[ENV_LastVib+edi*2],dx
	mov	si,word ptr [eax]
	shl	esi,16
	movzx	si,byte ptr [eax+2]
	sub	si,dx
	rol	esi,16
	mov	[ENV_VibInfo+edi*4],esi
	mov	[ENV_BInterPol+edi*2],0
	jmp	EndRowCommands

;--------------------------------------------------------------- 2C
Fix_GlobalMasterVolume:
	cmp	al,7fh
	jbe	From2
	mov	al,7fh
From2:
	mov	GlobalVolume,al
	mov	ecx,32
	xor	edi,edi
GlobVol:
	and	[SkipFlag+edi*2],0fffeh
	inc	edi
	loop	GlobVol
	jmp	EndRowCommands

;--------------------------------------------------------------- 3f
Fix_SyncByte:
	mov	Sync_Byte,al
	jmp	EndRowCommands
;--------------------------------------------------------------- E0
Fix_Filter:
	jmp	EndRowCommands
;--------------------------------------------------------------- E1
Fix_FineSlideUp:
	and	eax,0ffh
	shl	ax,4
	sub	[SlideTable+edi*4],eax

	movzx	bp,[CurrNoteTable+edi]
	cmp	bp,0
	jnz	@@Skutt2
	mov	bp,dx
@@Skutt2:
	movzx	edx,SlideUpLimit

	call	CheckSlideUpLimit
	jnc	SetFSU
	add	[SlideTable+edi*4],ebp
SetFSU:
	and	[SkipFlag+edi*2],0fffdh
	jmp	EndRowCommands
;--------------------------------------------------------------- E2
Fix_FineSlideDn:
	and	eax,0ffh
	shl	ax,4
	add	[SlideTable+edi*4],eax

	movzx	bp,[CurrNoteTable+edi]
	cmp	bp,0
	jnz	@@Skutt
	mov	bp,dx
@@Skutt:
	movzx	edx,SlideDnLimit

	call	CheckSlideDnLimit
	jnc	SetFSD
	sub	[SlideTable+edi*4],ebp
SetFSD:
	and	[SkipFlag+edi*2],0fffdh
	jmp	EndRowCommands
;--------------------------------------------------------------- E3
Fix_GlissandoControl:
	and	eax,1
	mov	ecx,edi
	shl	eax,cl
	btr	GlissControl,edi
	or	GlissControl,eax
	jmp	EndRowCommands
;--------------------------------------------------------------- E4
Fix_VibratoControl:
	cmp	al,7
	ja	EndRowCommands
	cmp	al,3
	jz	EndRowCommands
	and	[WaveControl+edi],0f0h
	or	[WaveControl+edi],al
	jmp	EndRowCommands
;--------------------------------------------------------------- E5
Fix_FineTune:
	call	E_SetFineTune
	and	[SkipFlag+edi*2],0fffdh
	jmp	EndRowCommands
;--------------------------------------------------------------- E6
Fix_Loop:
	cmp	al,0
	jnz	NoLabel
	mov	ax,CurrRow
	mov	ebx,LoopStackPtr
	cmp	[LoopToRow+ebx*2],ax	;If same row
	jz	EndRowCommands

	inc	LoopStackPtr
	mov	ebx,LoopStackPtr
	mov	[LoopToRow+ebx*2],ax
	jmp	EndRowCommands
NoLabel:
	mov	ecx,LoopStackPtr
	jecxz	EndRowCommands
	cmp	byte ptr [LoopCount+ecx],0
	jz	SetNewLoop
	dec	byte ptr [LoopCount+ecx]
	jnz	LoopAgain
	mov	[LoopToRow+ecx*2],-1		;Erase used

	dec	LoopStackPtr
	jge	EndRowCommands
	mov	LoopStackPtr,0			;Safety
	jmp	EndRowCommands
SetNewLoop:
	mov	[LoopCount+ecx],al
LoopAgain:
	mov	ax,[LoopToRow+ecx*2]
	mov	GotoRow,ax
	mov	ax,CurrPosition
	mov	PositionJump,ax
	bts	CMDB_DFix,2
	jmp	EndRowCommands
;--------------------------------------------------------------- E7
Fix_TremoloControl:
	cmp	al,2
	ja	EndRowCommands
	shl	al,4
	and	[WaveControl+edi],0fh
	or	[WaveControl+edi],al
	jmp	EndRowCommands
;--------------------------------------------------------------- E8
SpecialBreakByte	dd	0

Fix_BreakLoop:
	cmp	[Mute+edi],1
	jz	EndRowCommands
	bts	SpecialBreakByte,edi

	cmp	dx,0
	jnz	EndRowCommands
	call	[CMDE8TBL]
	jmp	EndRowCommands

;--------------------------------------------------------------- EA
Fix_FineVolumeSlideUp:
	mov	cl,VolRate
	shl	al,cl
	add	[Volume+edi],al
	cmp	[Volume+edi],127
	jb	SetFVSU
	mov	[Volume+edi],127
SetFVSU:
	mov	al,[Volume+edi]
	mov	[Vol+edi],al
	and	[SkipFlag+edi*2],0fffeh
	jmp	EndRowCommands
;--------------------------------------------------------------- EB
Fix_FineVolumeSlideDn:
	mov	cl,VolRate
	shl	al,cl
	sub	[Volume+edi],al
	jg	SetFVSD
	mov	[Volume+edi],0
SetFVSD:
	mov	al,[Volume+edi]
	and	[SkipFlag+edi*2],0fffeh
	jmp	EndRowCommands
;--------------------------------------------------------------- ED
Fix_NoteDelay_Prepare:
	cmp	al,0
	jz	EndRowCommands
	or	[SkipFlag+edi*2],00006h
	mov	[Note+edi],dl
	mov	dl,RealNote
	mov	[R_Note+edi],dl
	mov	[CurrSample+edi*2],bx
	bts	NoteDelayCheck,edi
	cmp	al,1
	jnz	EndRowCommands
	mov	[ERampDownTable+edi],1
	mov	DoERamp,1
	jmp	EndRowCommands
;--------------------------------------------------------------- EE
Fix_PatternDelay:
	inc	al
	mov	PatternDelay2,al
	mov	PatternDelay,0
	jmp	EndRowCommands
;--------------------------------------------------------------- F
Fix_Speed:
	xor	ah,ah
	cmp	TempoDisabled,0
	jz	DoTempo
	cmp	al,01Fh
	jb	DoTempo
	mov	al,01fh
DoTempo:
	cmp	al,01Fh
	ja	Tempo
	cmp	al,0
	jz	StopTune

	mov	ModSpeed,al
	jmp	Tempo1
Tempo:
	shl	ax,8
	and	ModTempo,0ffh
	or	ModTempo,ax
Tempo1:
	mov	ax,ModTempo
	mov	HertzAdder,ax

	jmp	EndRowCommands
StopTune:
	mov	SongFinished,1
	mov	TuneStopped,1
	jmp	EndRowCommands
;--------------------------------------------------------------- 1f
Fix_BPMDecimal:
	cmp	TempoDisabled,1
	jz	EndRowCommands
	cmp	al,9
	jbe	BPMDecOk
	mov	al,9
BPMDecOk:
	mov	bl,26
	mul	bl
	and	ModTempo,0ff00h
	or	ModTempo,ax
	mov	ax,ModTempo
	mov	HertzAdder,ax
	jmp	EndRowCommands
;---------------------------------------------------------------

EndRowCommands:
	popf
	popad
	ret
FixRowCommands	EndP


comment Ù
ÕÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¸
³ "DMA_setup"   PROGRAM A CHANNEL ON THE 8237 DMA CONTROLLER               ³
³									   ³
³ INPUT:	AL    Mode Register  ( bits 0..1 ignored )		   ³
³		AH    channel	 0..7					   ³
³		EBX   Physical Base Address				   ³
³		ECX   Bytes to transfer 				   ³
³									   ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DMA_setup	Proc	Near
	pushad
	xor	edx,edx
	and	ah,7
	mov	DMA_channel,ah
	and	al,NOT 3
	mov	mode,al

	; -----  set channel mask register ------
	movzx	edi,DMA_channel
	mov	eax,edi
	shr	edi,2
	and	al,0011b
	or	al,0100b
	mov	dl,DMA_SNGL[edi]
	out	dx,al			;Disable DREQ

	; ----- set mode register ------
	and	al,03h
	or	al,Mode
	mov	dl,DMA_MODE[edi]
	out	dx,al

	; ------  clear MSB/LSB flip flop -----------
	mov	dl,DMA_CLRFF[edi]
	out	dx,al

	;---- set byte count register ----
	movzx	edi,DMA_channel
	mov	eax,ecx
	mov	ecx,edi
	shr	ecx,2
	shr	eax,cl			;divide count address by 2 for DMA # 2
	dec	eax			;count - 1
	mov	dl,DMA_CNT[edi] 	;bits 0..7
	out	dx,al
	shr	eax,8
	out	dx,al			;bits 8..15


	;---- set channel base address ---
	push	ebx
	shr	ebx,cl			;divide base address by 2 for DMA # 2
	mov	al,BL			;set bits 0..7
	mov	dl,DMA_ADDR[edi]
	out	dx,al
	mov	al,BH			;set bits 8..15
	out	dx,al

	pop	ebx		;divide base address by 10000h for DMA # 1&2
	shr	ebx,16
	mov	al,BL		    ;set bits 16..23 ( in LSB page register )
	mov	dl,DMA_PAGE[edi]
	out	dx,al

	; -----  clear channel (mask register) ------
	mov	eax,edi
	shr	edi,2
	and	al,03h
	mov	dl,DMA_SNGL[edi]
	out	dx,al
	popad
	ret
DMA_setup	EndP

;in ah=DMA
DMA_shutdown	Proc	Near
	pushad
	movzx	eax,ah
	mov	edi,eax
	shr	edi,2
	and	al,03h
	or	al,04h
	xor	dh,dh
	mov	dl,DMA_SNGL[edi]
	out	dx,al

;Turn off AutoInit Bit to avoid slowdown bug.
;	mov	al,00001000b		 ; DMA mode register
;	mov	ah,DMA_Play_Chan	 ; Channel number ( 0..7 )
;	call	DMA_Setup
	popad
	ret
DMA_shutdown	EndP

;in ah=DMA Channel
;out EAX=count
DMA_GetCount	Proc	Near
	push	ecx
	push	edx

	movzx	eax,ah			;get DMA I/O port addresses
	mov	cl,DMA_CNT[eax]
	shr	eax,2
	mov	ch,DMA_CLRFF[eax]

	xor	dh,dh			;clear flip-flop register
	mov	dl,ch
	out	dx,al

	xor	eax,eax 		;read DMA count register
	mov	dl,cl
	in	al,dx
	xchg	al,ah
	in	al,dx
	xchg	al,ah

	test	ch,ch			;convert to bytes for 16-bit DMAC
	sets	cl
	shl	eax,cl

	pop	edx
	pop	ecx
	ret
DMA_GetCount	EndP

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Main Playing Routine ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
Align 4
HertzAdder	dw	7d00h
HertzMain	dw	0
MasterFrequency dw	0
SubFrequency	dw	0
MF_Add		dd	0
MF_Ovf		dd	0
MX_Add		dd	0
MX_Ovf		dd	0
AMS_ReEnter	db	0
;xxxxxxxxxxxxxxxxxxxxxxxxx
Align 4
AMSPlay Proc	Near
;	inc	MasterFrequency 		;102.4
;	jmp	cs:fword ptr Old_PM_Vec 		;Chain to old IRQ
	pushad
	pushfd
	push	gs ds es
	mov	ds,cs:_seldata
	mov	es,cs:_seldata
	mov	gs,cs:_selzero
	cld

AMSPlay2:
	sti

	mov	al,020h
	out	0a0h,al
	out	020h,al

	cmp	AMS_ReEnter,1
	jz	Quit_ISR2
	mov	AMS_ReEnter,1

	cmp	SoundCard,0
	jz	@@NOS
	cmp	SoundCard,1
	jz	@@GUS
	cmp	SoundCard,5
	jz	@@GUS
	cmp	SoundCard,6
	jz	@@GUS
	jmp	SoundBlaster
; ** No sound
@@NOS:
	inc	MasterFrequency 		;102.4

	cmp	CallRoutine,0			;102.4
	jz	NoExtraCall0
	mov	eax,CallRoutine
	call	eax
NoExtraCall0:
	call	UpdatePlayer			;No Push
	jmp	Quit_ISR

; ** GUS
@@GUS:
	inc	MasterFrequency 		;102.4

	cmp	CallRoutine,0			;102.4
	jz	NoExtraCall
	mov	eax,CallRoutine
	call	eax
NoExtraCall:

IFE	PLAYER
	cmp	Sampling,0
	jnz	Quit_ISR
ENDIF

	call	UpdatePlayer			;No Push

	call	PollRollOverPos 		;Check Rollover stuff

	jmp	Quit_ISR
; ** SB
SoundBlaster:					;102.4-483

	mov	eax,MF_Add
	add	MF_Ovf,eax
	jnc	NoExtraCall2

	inc	MasterFrequency 		;102.4
	cmp	CallRoutine,0
	jz	NoExtraCall2
	mov	eax,CallRoutine
	call	eax
NoExtraCall2:

IFE	PLAYER
	cmp	Sampling,0
	jnz	Quit_ISR
ENDIF

	mov	eax,MX_Add
	add	MX_Ovf,eax
	jnc	Quit_ISR

	call	SBP_MixData			;23-483

; ** Quit
Quit_ISR:
	mov	AMS_ReEnter,0
Quit_ISR2:
	pop	es ds gs
	Popfd
	Popad

	cmp	Shelling,1			;If in a shell
	jz	Chain

	iRetd
AMSPlay EndP

Chain:
	jmp	cs:fword ptr Old_PM_Vec 	;Chain to old IRQ



;±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±

UpdatePlayer	Proc	near
	mov	UpdateChannels,0
	call	FixEnvelopes		;No push!
	mov	ax,HertzAdder
	add	HertzMain,ax
	jnc	NoNewRow
	inc	SubFrequency

	cmp	SoundCard,5		;MAX
	jz	@@Ramp
	cmp	SoundCard,1		;GUS only
	jnz	NoRamp
@@Ramp:
	lea	esi,ERampDownTable
	cmp	DoERamp,1
	jz	DoTheERamp
	mov	bl,pt_counter
	inc	bl
	cmp	ModSpeed,bl
	jnz	NoRamp
	cmp	PatternDelay,0
	jg	NoRamp
	lea	esi,RampDownTable
DoTheERamp:
	call	RampDownNeededChannels
	mov	DoERamp,0
NoRamp:
IF PLAYER
	call	IndicateTime
ENDIF


;	cmp	PositionJump,-1
;	jnz	NewRowAnyway

	cmp	TuneStopped,1
	jz	NoNewRow

	cmp	SkipClickRemoval,0
	jz	@@NoOneRow
	cmp	GoToRow,-1
	jnz	NewRowAnyway
@@NoOneRow:

	inc	Pt_Counter
	mov	bl,ModSpeed
	cmp	Pt_Counter,bl
	jnz	NotNewRow
NewRowAnyway:
	mov	pt_counter,0
	call	UpdateNewRow

	cmp	SoundCard,5		;MAX
	jz	@@NewRow
	cmp	SoundCard,1		;GUS Only
	jnz	NoNewRow
@@NewRow:
	call	CheckNextRow
	jmp	NoNewRow

NotNewRow:

	xor	edi,edi 		;channel nr
	movzx	ebx,Channels
UpdateCommands:

	cmp	[Mute+edi],1
	jz	NoMWCommands

	xor	ebp,ebp
	mov	edx,edi
	shl	edx,4
Multiple:
	mov	ax,ds:[Command+ebp*2+edx]	;Command+ebp*2+edi*16
	cmp	ax,0
	jz	SkipItNow
	call	FixCommands
SkipItNow:
	inc	ebp
	cmp	ebp,Dword Ptr Commands
	jnz	Multiple

NoMWCommands:
	inc	edi
	cmp	edi,ebx
	jnz	UpdateCommands

NoNewRow:
	movzx	ecx,AllocChannels
	xor	edi,edi
AfterEnvFix:
	push	ecx
	btr	EnvVolCheck,edi
	jnc	EnvVolIsSet
	mov	al,[CurrVolume+edi]
	call	SetVolume
EnvVolIsSet:
	btr	EnvPanCheck,edi
	jnc	EnvPanpotIsSet
	mov	ah,[CurrentChannelPanPot+edi]
	call	SetPanPot
EnvPanpotIsSet:
	btr	EnvVibCheck,edi
	jnc	EnvVibIsSet
	call	SetTheFreq
EnvVibIsSet:
	pop	ecx
	inc	edi
	loop	AfterEnvFix

	call	StartTheChannels
	ret
UpdatePlayer	EndP

HiMemErrVar	dw	0
MemoryInit	Proc	Near
	pushad
	pushf
	mov	HiMemErrVar,ax
	mov	StackSave,esp

	mov	eax,HiMemPtr		;Allocate TempBuffer
	mov	GUS_TempBuffPtr,eax
	mov	eax,131072
	add	HiMemPtr,eax
	mov	eax,HiMemPtr
	cmp	HiMemEnd,eax
	jb	HighMemError

	mov	eax,HiMemPtr		;Allocate ChannelNamesBuffer
	mov	ChannelNamesPtr,eax
	mov	eax,32*11
	add	HiMemPtr,eax
	mov	ebx,HiMemPtr
	cmp	HiMemEnd,ebx
	jb	HighMemError

	mov	eax,HiMemPtr		;Allocate SB Voltable
	mov	VolTablePtr,eax
	mov	eax,(129*256*2)+512
	add	HiMemPtr,eax
	mov	ebx,HiMemPtr
	cmp	HiMemEnd,ebx
	jb	HighMemError

	mov	eax,HiMemPtr		;Allocate SB PostProcess Table
	mov	PostTablePtr,eax
	mov	eax,2048
	add	HiMemPtr,eax
	mov	ebx,HiMemPtr
	cmp	HiMemEnd,ebx
	jb	HighMemError

	mov	edi,ChannelNamesPtr	;Clear ChannelNames
	mov	ecx,eax
	xor	al,al
	rep	stosb

	call	GetRowSize

	popf
	popad
	clc
	ret
HighMemError:
	sub	HiMemPtr,eax
	mov	ax,HiMemErrVar
	jmp	ErrorHandler
MemoryInit	Endp

GetPatternSize	Proc	Near
	pushad
	movzx	eax,Channels	;Get PatternSize
	movzx	ebx,Commands
	shl	ebx,1
	add	ebx,2
	mul	ebx
	mov	ebx,CurrPattLength
	mul	ebx
	mov	PatternSize2,eax
	popad
	ret
GetPatternSize	EndP

GetRowSize	Proc	Near
	pushad
	movzx	ecx,Channels	;Get RowSize and ChRowSize
	movzx	eax,Commands
	shl	eax,1
	add	eax,2
	mov	RowSize,eax
	mul	ecx
	mov	ChRowSize,eax
	popad
	ret
GetRowSize	EndP

WaitDiskReady	Proc	Near
	ret
	mov	ecx,255
TLoop:	;int	8h
	loop	TLoop
	ret
WaitDiskReady	EndP

WaitKey Proc	near
	push	ax
WaitKey1:
	in	al,60h
	cmp	al,57
	jnz	WaitKey1
WaitKey2:
	in	al,60h
	cmp	al,57
	jz	WaitKey2
	pop	ax
	ret
WaitKey EndP

olles	db	0
olles2	db	0
Global Olles:Byte,Sara4:Near
Sara4	Proc	Near
	Pushad
	pushf
	xor	olles,63
	mov	dx,3c8h
	xor	al,al
	out	dx,al
	inc	dx
	mov	al,Olles
	out	dx,al
	xor	al,al
	out	dx,al
	out	dx,al
	popf
	Popad
	Ret
Sara4	EndP

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;In:	CurrPosition
;	CurrRow
;
;Fixes: CurrPatt, CurrPatt2, CurrPattLength, Channels, Commands
;	PatternOffset, RowSize, ChRowSize
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

PosInit 	Proc	Near
	movzx	ebx,CurrPosition	;init a new pattern
	cmp	bx,Positions
	jb	NoWorry2
	mov	ebx,0
	mov	CurrPosition,0
	mov	SongFinished,2
NoWorry2:
	shl	ebx,1
	add	ebx,PatternOrderPtr
	movzx	ebx,word ptr [ebx]
	mov	CurrPatt,bx
	mov	CurrPatt2,bx
PattInit:
	mov	eax,[AllocTable+ebx*8]
	cmp	eax,0
	jnz	NoEmptyPatt1
	mov	eax,EmptyPattern
NoEmptyPatt1:
	movzx	ebx,byte ptr [eax+10]
	inc	ebx
	mov	CurrPattLength,ebx

	mov	dl,[eax+11]
	mov	dh,dl
	and	dl,31
	inc	dl
	shr	dh,5
	mov	Channels,dl
	mov	Commands,dh
	call	GetRowSize

	add	eax,12
	mov	PatternOffset,eax
	mov	PatternStart,eax

	mov	ax,CurrRow
	cmp	bx,ax
	ja	NoLenProbb
	mov	CurrRow,0
NoLenProbb:
	movzx	ebx,CurrRow
	mov	eax,ChRowSize
	mul	ebx
	add	PatternOffset,eax
	ret
PosInit     Endp



ClearForPlay	 Proc	 Near
	Push	ecx edi eax
	mov	ecx,Offset ClearOffset2
	sub	ecx,Offset ClearOffset1
	mov	edi,Offset ClearOffset1
	xor	eax,eax
	rep	stosb

	lea	edi,LoopToRow
	mov	ecx,16
	mov	ax,-1
	rep	stosw

;	mov	GotoRow,-1
	mov	PositionJump,-1

	mov	PatternDelay,0
	mov	al,ModSpeed
	dec	al
	mov	pt_counter,al
;	mov	GotoRow,0
	mov	Hertzmain,0
	Pop	eax edi ecx
	Ret
ClearForPlay	EndP

;IN:
;EDX=Keyboardnote
; BL=CurrentInstrument
;Out:
;EDX=New KeyboardNote
; BX=CurrentSample
GetSplitCurrSample	Proc	Near
	push	eax
	sub	edx,2
	jl	NoSplit
	btr	Inst0,edi
	and	ebx,0ffh
	jnz	NotBXzero
	bts	Inst0,edi
	movzx	ebx,[CurrInst+edi]
NotBXzero:
	GetOffset ebx,eax,ENV_SplitKBD
	add	eax,edx
	movzx	ax,byte ptr [eax]
	shl	bx,4
	add	ax,bx
	movzx	ebx,ax
	movsx	eax,[RelativeNote+ebx]
	add	edx,eax
	jg	RaeddaJoppe
	mov	edx,0
RaeddaJoppe:
	cmp	edx,120
	jb	DoedEllerLevande
	mov	edx,119
DoedEllerLevande:
	add	edx,2
	pop	eax
	ret

NoSplit:			;If no new note
	movzx	edx,[R_CurrNoteTable+edi]
	sub	edx,2
	jl	NoSplit2
EmptyNow:
	btr	Inst0,edi
	and	ebx,0ffh
	jnz	NotBXzero2
	bts	Inst0,edi
	movzx	ebx,[CurrInst+edi]
NotBXzero2:
	GetOffset ebx,eax,ENV_SplitKBD
	add	eax,edx
	movzx	ax,byte ptr [eax]
	shl	bx,4
	add	bx,ax
	and	ebx,0ffffh
NoSplit2:
	mov	edx,0
	pop	eax
	ret
GetSplitCurrSample	EndP

FixAllocChannels:
	mov	AllocChannels,0
	lea	esi,AllocTable

	mov	ecx,1024
CheckNextPatt:
	lodsd
	cmp	eax,0
	jz	NoPatt

	mov	bl,[eax+11]
	and	bl,31
	inc	bl
	cmp	bl,AllocChannels
	jb	NoPatt
	mov	AllocChannels,bl
NoPatt:
	add	esi,4
	loop	CheckNextPatt

IFE	PLAYER
	mov	eax,EmptyPattern
	mov	bl,[eax+11]
	and	bl,31
	inc	bl
	cmp	bl,AllocChannels
	jb	NoPatt2
	mov	AllocChannels,bl
NoPatt2:
ENDIF

IF	PLAYER
	cmp	LoadFXEngine,0
	jz	@@NoFX
	add	AllocChannels,4 	;4 extra channels
@@NoFX:
ENDIF
	call	ChangeActiveVoices
	ret

Sync	Proc	Near
	Pusha
	Mov	Dx,3dah
@l1:
	In	Al,dx
	Test	Al,8
	Jne	@l1
@l2:
	In	Al,dx
	Test	Al,8
	Je	@l2
	Popa
	Ret
EndP



;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;				    ENVELOPE
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
EnvSine 	db 0,1,2,2,3,4,5,5,6,7,8,8,9,10,11,12,12,13,14,15,16,16,17,18,19,19,20,21,22,22,23,24,25,26,26,27,28,29,30,30,31,32,33,33,34,35,36,36,37,38,39,39,40,41,42,43,43,44,45,46,46,47,48,49,49,50,51,52,52,53,54,55,55,56,57,58,58,59,60,61,61,62,63,64,64,65,66,67,67,68,69,70,70,71,72,73,74,74,75,76,76,77,78,79,79,80,81,82,82,83,84,84,85,86,87,87,88,89,90,90,91,92,93,93,94,95,96,96,97,98,98,99,100,100,101,102,103,103,104,105,106,106,107,108,108,109,110,110,111,112,113,113,114,115,115,116,117,117,118
		db 119,119,120,121,121,122,123,123,124,125,126,126,127,127,128,129,130,130,131,132,132,133,134,134,135,136,136,137,138,138,139,139,140,141,141,142,143,143,144,145,145,146,146,147,148,148,149,150,150,151,152,152,153,153,154,155,155,156,156,157,158,158,159,160,160,161,161,162,163,163,164,164,165,166,166,167,167,168,168,169,170,170,171,171,172,173,173,174,174,175,175,176,177,177,178,178,179,179,180,180,181,181,182,182,183,184,184,185,185,186,186,187,187,188,188,189,190,190,191,191,192,192,193
		db 193,194,194,195,195,196,196,197,197,198,198,199,199,200,200,201,201,201,202,202,203,203,204,204,205,205,206,206,207,207,207,208,208,209,209,210,210,211,211,211,212,212,213,213,214,214,214,215,215,216,216,216,217,217,218,218,219,219,219,220,220,221,221,221,222,222,223,223,223,224,224,224,225,225,225,226,226,227,227,227,228,228,228,229,229,229,230,230,230,231,231,231,232,232,232,233,233,233,234,234,234,234,235,235,235,236,236,236,237,237,237,237,238,238,238,239,239,239,239,240,240,240,240
		db 241,241,241,241,242,242,242,242,243,243,243,243,244,244,244,244,244,245,245,245,245,246,246,246,246,246,247,247,247,247,247,248,248,248,248,248,248,249,249,249,249,249,249,250,250,250,250,250,250,250,251,251,251,251,251,251,251,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255

ENV_CurrVPoint	db	32 dup(0)
ENV_LastVol	db	32 dup(0)
ENV_VInterPol	dw	32 dup(0)
ENV_VolInfo	dd	32 dup(0)
ENV_SpdCounter	db	32 dup(0)
EnvVolume	db	32 dup(0)
EnvVolCheck	dd	0		;set if vol is already set

ENV_CurrPPoint	db	32 dup(0)
ENV_LastPan	dw	32 dup(0)
ENV_PInterPol	dw	32 dup(0)
ENV_PanInfo	dd	32 dup(0)
ENV_PSpdCounter db	32 dup(0)
EnvPanPot	db	32 dup(128)
EnvPanCheck	dd	0		;set if vol is already set

ENV_CurrBPoint	db	32 dup(0)
ENV_LastVib	dw	32 dup(0)
ENV_BInterPol	dw	32 dup(0)
ENV_VibInfo	dd	32 dup(0)
ENV_BSpdCounter db	32 dup(0)
VibPeriod	dw	32 dup(0)
EnvVibCheck	dd	0		;set if vol is already set

Env_FadeCounter dd	32 dup(0)

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
FixEnvelopes	Proc	Near
	movzx	ecx,AllocChannels
	xor	edi,edi
ENV_NextChannel:
	push	ecx
	cmp	[CurrNoteTable+edi],0
	jz	DontProcessEnv

	movzx	ebx,[CurrInst+edi]
	cmp	ebx,0
	jnz	WellIllLetYouThrough
	bt	Inst0,edi
	jnc	DontProcessEnv
WellIllLetYouThrough:
	cmp	bl,Samples
	ja	DontProcessEnv
;ÚÄÄÄÄÄÄÄÄÄÄÄÄ
;³VOLUME
;ÀÄÄÄÄÄÄÄÄÄÄÄÄ
	GetOffset ebx,edx,ENV_Flags
	bt	word ptr [edx],2			;Check Envelope ON
	jnc	DontProcessVolEnv
	cmp	[KeyOffTable+edi],1
	jz	ItsAlright2

	GetOffset ebx,edx,ENV_VolFade
	mov	ax,word ptr [edx]
	and	eax,0fffh
	mov	edx,[Env_FadeCounter+edi*4]
	sub	[Env_FadeCounter+edi*4],eax
	jge	ItsAlright
	mov	[Env_FadeCounter+edi*4],0
ItsAlright:
	cmp	edx,[Env_FadeCounter+edi*4]
	jz	ItsAlright2
	bts	EnvVolCheck,edi
ItsAlright2:

	GetOffset ebx,eax,ENV_NrVolPoints
	mov	dl,[ENV_CurrVPoint+edi] 		;Last Processed
	cmp	dl,[eax]
	ja	DontProcessVolEnv
	cmp	Byte ptr [eax],0			;No Envelope
	jz	DontProcessVolEnv

	GetOffset ebx,eax,ENV_Flags
	bt	word ptr [eax],1			;Check Sustain ON
	jnc	NoVSustain

	GetOffset ebx,eax,ENV_VolSustPoint
	dec	dl
	cmp	dl,[eax]				;Check Sustain Point
	jnz	NoVSustain
	cmp	[KeyOffTable+edi],0
	jnz	DontProcessVolEnv

NoVSustain:
	GetOffset ebx,edx,ENV_VolSpeed
	mov	al,[edx]
	cmp	al,0
	jnz	NoVolBPM
	mov	ax,HertzAdder
	shr	ax,8
NoVolBPM:
	add	[ENV_SpdCounter+edi],al
	jnc	DontProcessVolEnv

	inc	[ENV_VInterPol+edi*2]			;Interpolate next
	mov	dx,word ptr [ENV_VolInfo+edi*4]
	and	dx,511
	cmp	dx,[ENV_VInterPol+edi*2]
	jnz	ENV_ChangeVolume

	inc	[ENV_CurrVPoint+edi]			;New Point

	GetOffset ebx,edx,ENV_Flags
	bt	word ptr [edx],0			;Loop?
	jnc	NoEnvVolLoop
	cmp	[KeyOffTable+edi],1
	jz	NoVolBreakCheck
	bt	word ptr [edx],9			;Break Loop?
	jc	NoEnvVolLoop
NoVolBreakCheck:

	GetOffset ebx,edx,ENV_VolEnd
	mov	dl,[edx]
	inc	dl
	cmp	[ENV_CurrVPoint+edi],dl
	jnz	NoEnvVolLoop
	GetOffset ebx,edx,ENV_VolStart
	mov	dl,[edx]
	inc	dl
	mov	[ENV_CurrVPoint+edi],dl
	jmp	ENV_NextPoint
NoEnvVolLoop:

	GetOffset ebx,edx,ENV_NrVolPoints
	mov	dl,[edx]
	cmp	[ENV_CurrVPoint+edi],dl
	ja	ENV_ChangeVolume
ENV_NextPoint:
	GetOffset ebx,eax,ENV_VolPoints
	movzx	edx,byte ptr [ENV_CurrVPoint+edi]
	lea	edx,[edx+edx*2]
	add	eax,edx
	mov	dl,[eax-1]
	mov	[ENV_LastVol+edi],dl
	mov	dh,[eax+2]
	sub	dh,dl
	movsx	dx,dh
	mov	word ptr [ENV_VolInfo+edi*4+2],dx
	mov	dx,word ptr [eax]
	mov	word ptr [ENV_VolInfo+edi*4],dx
	mov	[ENV_VInterPol+edi*2],0
ENV_ChangeVolume:
	mov	cl,byte ptr [ENV_VolInfo+edi*4+1]
	test	cl,00000110b
	jz	StraightVolLine

	lea	esi,[ENV_VolInfo+edi*4]
	lea	eax,[ENV_Vinterpol+edi*2]
	call	FixCurve
	jmp	GoFinishVol

StraightVolLine:
	movsx	eax,word ptr [ENV_VolInfo+edi*4+2]
	movzx	ebp,word ptr [ENV_VolInfo+edi*4]
	movzx	esi,[ENV_VInterPol+edi*2]
	imul	esi
	idiv	ebp
GoFinishVol:
	add	al,[ENV_LastVol+edi]
	mov	[EnvVolume+edi],al
	bts	EnvVolCheck,edi
DontProcessVolEnv:

;ÚÄÄÄÄÄÄÄÄÄÄÄÄ
;³PANNING
;ÀÄÄÄÄÄÄÄÄÄÄÄÄ
	GetOffset ebx,edx,ENV_Flags
	bt	word ptr [edx],5			;Check Envelope ON
	jnc	DontProcessPanEnv

	mov	dl,[ENV_CurrPPoint+edi] 		;Last Processed
	GetOffset ebx,eax,ENV_NrPanPoints
	cmp	dl,[eax]
	ja	DontProcessPanEnv
	cmp	Byte ptr [eax],0			;No Envelope
	jz	DontProcessPanEnv

	GetOffset ebx,eax,ENV_Flags
	bt	word ptr [eax],4			;Check Sustain ON
	jnc	NoPSustain

	dec	dl
	GetOffset ebx,eax,ENV_PanSustPoint
	cmp	dl,[eax]				;Check Sustain Point
	jnz	NoPSustain
	cmp	[KeyOffTable+edi],0
	jnz	DontProcessPanEnv

NoPSustain:
	GetOffset ebx,edx,ENV_PanSpeed
	mov	al,[edx]
	cmp	al,0
	jnz	NoPanBPM
	mov	ax,HertzAdder
	shr	ax,8
NoPanBPM:
	add	[ENV_PSpdCounter+edi],al
	jnc	DontProcessPanEnv

	inc	[ENV_PInterPol+edi*2]			;Interpolate next
	mov	dx,word ptr [ENV_PanInfo+edi*4]
	and	dx,511
	cmp	dx,[ENV_PInterPol+edi*2]
	jnz	ENV_ChangePanPot
	inc	[ENV_CurrPPoint+edi]			;New Point

	GetOffset ebx,edx,ENV_Flags
	bt	word ptr [edx],3			;Loop?
	jnc	NoEnvPanLoop

	cmp	[KeyOffTable+edi],1
	jz	NoPanBreakCheck
	bt	word ptr [edx],0ah			;Break Loop?
	jc	NoEnvPanLoop
NoPanBreakCheck:

	GetOffset ebx,edx,ENV_PanEnd
	mov	dl,[edx]
	inc	dl
	cmp	[ENV_CurrPPoint+edi],dl
	jnz	NoEnvPanLoop
	GetOffset ebx,edx,ENV_PanStart
	mov	dl,[edx]
	inc	dl
	mov	[ENV_CurrPPoint+edi],dl
	jmp	ENV_NextPPoint
NoEnvPanLoop:

	GetOffset ebx,edx,ENV_NrPanPoints
	mov	dl,[edx]
	cmp	[ENV_CurrPPoint+edi],dl
	ja	ENV_ChangePanPot
ENV_NextPPoint:
	GetOffset ebx,eax,ENV_PanPoints
	movzx	edx,[ENV_CurrPPoint+edi]
	lea	edx,[edx+edx*2]
	add	eax,edx
	movzx	dx,byte ptr [eax-1]
	mov	[ENV_LastPan+edi*2],dx
	mov	si,word ptr [eax]
	shl	esi,16
	movzx	si,byte ptr [eax+2]
	sub	si,dx
	rol	esi,16
	mov	[ENV_PanInfo+edi*4],esi
	mov	[ENV_PInterPol+edi*2],0
ENV_ChangePanPot:
	mov	cl,byte ptr [ENV_PanInfo+edi*4+1]
	test	cl,00000110b
	jz	StraightPanLine

	lea	esi,[ENV_PanInfo+edi*4]
	lea	eax,[ENV_PInterpol+edi*2]
	call	FixCurve
	jmp	GoFinishPan

StraightPanLine:
	movsx	eax,word ptr [ENV_PanInfo+edi*4+2]
	movzx	ebp,word ptr [ENV_PanInfo+edi*4]
	movzx	esi,[ENV_PInterPol+edi*2]
	imul	esi
	idiv	ebp
GoFinishPan:
	add	ax,[ENV_LastPan+edi*2]
	cmp	[EnvPanPot+edi],al
	jz	DontProcessPanEnv
	mov	[EnvPanPot+edi],al

	bts	EnvPanCheck,edi
DontProcessPanEnv:

;ÚÄÄÄÄÄÄÄÄÄÄÄÄ
;³VIBRATO
;ÀÄÄÄÄÄÄÄÄÄÄÄÄ
	GetOffset ebx,edx,ENV_Flags
	bt	word ptr [edx],8			;Check Envelope ON
	jnc	DontProcessEnv

	mov	dl,[ENV_CurrBPoint+edi] 		;Last Processed
	GetOffset ebx,eax,ENV_NrVibPoints
	cmp	dl,[eax]
	ja	DontProcessEnv
	cmp	byte ptr [eax],0			;No Envelope
	jz	DontProcessEnv

	GetOffset ebx,eax,ENV_Flags
	bt	word ptr [eax],7			;Check Sustain ON
	jnc	NoBSustain

	dec	dl
	GetOffset ebx,eax,ENV_VibSustPoint
	cmp	dl,[eax]				;Check Sustain Point
	jnz	NoBSustain
	cmp	[KeyOffTable+edi],0
	jnz	DontProcessEnv

NoBSustain:
	GetOffset ebx,edx,ENV_VibSpeed
	mov	al,[edx]
	cmp	al,0
	jnz	NoVibBPM
	mov	ax,HertzAdder
	shr	ax,8
NoVibBPM:
	add	[ENV_BSpdCounter+edi],al
	jnc	DontProcessEnv

	add	[ENV_BInterPol+edi*2],1 		;Interpolate next
	mov	dx,word ptr [ENV_VibInfo+edi*4]
	and	dx,511
	cmp	[ENV_BInterPol+edi*2],dx
	jb	ENV_ChangeVibrato
	inc	[ENV_CurrBPoint+edi]			;New Point
	mov	[ENV_BInterPol+edi*2],dx

	GetOffset ebx,edx,ENV_Flags
	bt	word ptr [edx],6			;Loop?
	jnc	NoEnvVibLoop

	cmp	[KeyOffTable+edi],1
	jz	NoVibBreakCheck
	bt	word ptr [edx],0bh			;Break Loop?
	jc	NoEnvVibLoop
NoVibBreakCheck:

	GetOffset ebx,edx,ENV_VibEnd
	mov	dl,[edx]
	inc	dl
	cmp	[ENV_CurrBPoint+edi],dl
	jnz	NoEnvVibLoop
	GetOffset ebx,edx,ENV_VibStart
	mov	dl,[edx]
	inc	dl
	mov	[ENV_CurrBPoint+edi],dl
	jmp	ENV_NextBPoint
NoEnvVibLoop:

	GetOffset ebx,edx,ENV_NrVibPoints
	mov	dl,[edx]
	cmp	[ENV_CurrBPoint+edi],dl
	ja	ENV_ChangeVibrato
ENV_NextBPoint:
	GetOffset ebx,eax,ENV_VibPoints
	movzx	edx,[ENV_CurrBPoint+edi]
	lea	edx,[edx+edx*2]
	add	eax,edx
	movzx	dx,byte ptr [eax-1]
	mov	[ENV_LastVib+edi*2],dx	     ;--lhd
	mov	si,word ptr [eax]	     ;00hl
	shl	esi,16			     ;hl00
	movzx	si,byte ptr [eax+2]	     ;hl0d
	sub	si,dx			     ;hl0d
	rol	esi,16			     ;0dhl
	mov	[ENV_VibInfo+edi*4],esi      ;lhd0
	mov	[ENV_BInterPol+edi*2],0
ENV_ChangeVibrato:
	mov	cl,byte ptr [ENV_VibInfo+edi*4+1]
	test	cl,00000110b
	jz	StraightVibLine

	lea	esi,[ENV_VibInfo+edi*4]
	lea	eax,[ENV_BInterpol+edi*2]
	call	FixCurve
	jmp	GoFinishVib

VibAmpTBL	dd	Amp1,Amp2,Amp3,Amp4
StraightVibLine:
	mov	ax,word ptr [ENV_VibInfo+edi*4+2]
	mov	bp,word ptr [ENV_VibInfo+edi*4]
	mov	si,[ENV_BInterPol+edi*2]
	imul	si
	idiv	bp
GoFinishVib:
	add	ax,[ENV_LastVib+edi*2]
	sub	ax,128
	GetOffset ebx,edx,ENV_VolFade
	movzx	edx,word ptr [edx]
	shr	dx,12
	jmp	[VibAmpTBL+edx*4]
Amp3:
	shl	ax,1
	jmp	Amp2
Amp4:
	shl	ax,2
	jmp	Amp2
Amp1:
	sar	ax,1
Amp2:
	cmp	[VibPeriod+edi*2],ax
	jz	DontProcessEnv
	mov	[VibPeriod+edi*2],ax
	bts	EnvVibCheck,edi

DontProcessEnv:
	inc	edi
	pop	ecx
	loop	ENV_NextChannel
	ret
FixEnvelopes	EndP

FixCurve	Proc	Near
	movzx	eax,word ptr [eax]			;Interpol
	shl	eax,9
	mov	bp,word ptr [esi]			;Delta X
	and	ebp,511
	xor	edx,edx
	div	ebp
	bt	cx,1
	mov	ecx,0
	mov	cl,byte ptr [EnvSine+eax]
	jc	VolSine1
	neg	eax
	add	eax,512
	movzx	eax,byte ptr [EnvSine+eax]
	mov	ecx,255
	sub	ecx,eax
VolSine1:
	mov	eax,ecx
	movsx	ebp,word ptr [esi+2]			;Delta Y
	mov	cx,1
	cmp	ebp,0
	jg	VolEnvPozit
	neg	ebp
	mov	cx,0
VolEnvPozit:
	mul	ebp
	shr	eax,8
	cmp	cx,1
	jz	VolEnvPozit2
	neg	ax
VolEnvPozit2:
	ret
FixCurve	Endp

;-------------------------------
;Calls: bp=BaseNote
;	dx=Note to check against (the limit)
;Out:	carry=0
;	  Not at Limit
;	carry=1
;	  Limit Reached
;	ebp=overflow
;-------------------------------
Save_EBP	dd	0
CheckSlideUpLimit	Proc	Near
	pushad
	cmp	LinFreq,1
	jz	CSUL_Linear

	sub	edx,2
	sub	ebp,2
	ConvertNote edx edx
	ConvertNote ebp ebp
	add	ebp,[SlideTable+edi*4]

	sub	ebp,edx
	jg	DidNotPassLimit
	neg	ebp
	mov	Save_EBP,ebp
	popad
	mov	ebp,Save_EBP
	stc
	ret
DidNotPassLimit:
	popad
	clc
	ret

CSUL_Linear:
	push	edx
	mov	eax,[SlideTable+edi*4]
	cdq
	mov	ebx,16*16
	idiv	ebx
	mov	Save_EBP,edx

	sub	ebp,eax
	pop	edx
	sub	ebp,edx
	jle	DidNotPassLimit
	shl	ebp,8
	sub	Save_EBP,ebp
	popad
	mov	ebp,Save_EBP
	neg	ebp
	stc
	ret

CheckSlideUpLimit	EndP

;-------------------------------
;Calls: bp=BaseNote
;	dx=Note to check against (the limit)
;Out:	carry=0
;	  Not at Limit
;	carry=1
;	  Limit Reached
;	ebp=overflow
;-------------------------------
CheckSlideDnLimit	Proc	Near
	pushad
	cmp	LinFreq,1
	jz	CSDL_Linear

	sub	edx,2
	sub	ebp,2
	ConvertNote edx edx
	ConvertNote ebp ebp
	add	ebp,[SlideTable+edi*4]

	sub	edx,ebp
	jg	DidNotPassLimit2
	neg	edx
	mov	Save_EBP,edx
	popad
	mov	ebp,Save_EBP
	stc
	ret
DidNotPassLimit2:
	popad
	clc
	ret

CSDL_Linear:
	push	edx
	mov	eax,[SlideTable+edi*4]
	cdq
	mov	ebx,16*16
	idiv	ebx
	mov	Save_EBP,edx
	sub	ebp,eax
	pop	edx
	sub	ebp,edx
	jge	DidNotPassLimit2
	neg	ebp
	shl	ebp,8
	add	Save_EBP,ebp
	popad
	mov	ebp,Save_EBP
	stc
	ret
CheckSlideDnLimit	EndP

;Calls: eax=Note, edi=channel
GetPeriod	Proc	Near
	push	ebx ecx edx
	mov	ebx,12
	xor	edx,edx
	div	ebx
	mov	edx,[Pt_PeriodTable+edx*4]
	mov	ecx,eax
	shr	edx,cl
	mov	eax,edx
	mov	ecx,8363
	mul	ecx

	movzx	ecx,word ptr [CurrSample+edi*2]
	movzx	ecx,word ptr [SampleRates+ecx*2]
	cmp	ecx,0
	jnz	NoC2Zero
	mov	ecx,8363
NoC2Zero:
	div	ecx

	pop	edx ecx ebx
	ret
GetPeriod	EndP

;Puts a text in textmode
;Calls: ESI = Offset to  text
PrintText2	Proc	Near
	Pushad
	mov	edx,esi
	mov	ah,9
	int	21h
	Popad
	Ret
PrintText2	EndP

IFE	PLAYER
;IN: bl=min,bh=max
;out ebx=digit
ReadDigit	Proc	Near
	cli
	push	ax
ReadAgain:
	in	al,60h
	cmp	al,2
	jb	ReadAgain
	cmp	al,11
	ja	ReadAgain
	dec	al
	cmp	al,10
	jnz	NotDigitZero
	mov	al,0
NotDigitZero:
	cmp	al,bl
	jb	ReadAgain
	cmp	al,bh
	ja	ReadAgain
	movzx	ebx,al
WaitDigitRelease:
	in	al,60h
	test	al,80h
	jz	WaitDigitRelease
	sti
	pop	ax
	ret
ReadDigit	EndP
ENDIF

NotEnoughHiMem:
	sti
	mov	ax,HimemErrNF
	jmp	ErrorHandler


StopOneVoice:
	jmp	[StopOneVoiceTBL]

SetTheFreq:
	jmp	[SetTheFreqTBL]

PlayVoice:
	jmp	[PlayVoiceTBL]

KeyBoardPlayVoice:
	jmp	[KeyBoardPlayVoiceTBL]

LastVoice	dw	0
KBDPlayFlag	dd	0
StartTheChannels:
	jmp	[StartTheChannelsTBL]

SetPanPot:
	jmp	[SetPanPotTBL]

SetZeroVol:
	jmp	[SetZeroVolTBL]

SetOrigVol:
	jmp	[SetOrigVolTBL]

ChangeActiveVoices:
	jmp	[ChangeActiveVoicesTBL]

ClearTheSamples:
	jmp	[ClearTheSamplesTBL]

MoveSample:
	jmp	[MoveSampleTBL]

GetSampleFromDRAM:
	jmp	[GetSampleFromDRAMTBL]

InitSoundCard:
	call	[InitSoundCardTBL]
IFE	PLAYER
	call	CheckSoundCardAllowSample
ENDIF
	ret

TurnOnSoundCard:
	jmp	[TurnOnSoundCardTBL]

DeInitSoundCard:
	jmp	[DeInitSoundCardTBL]

AllocSample:
	jmp	[AllocSampleTBL]

DisallocSample:
	jmp	[DisallocSampleTBL]

Mixer:
	jmp	[MixerTBL]

StartTimer:
	jmp	[StartTimerTBL]

StopTimer:
	jmp	[StopTimerTBL]

FixStartSample:
	jmp	[FixStartSampleTBL]

StartADC:
	jmp	[StartADCTBL]

StopADC:
	jmp	[StopADCTBL]

ChangeSamplingFreq:
	jmp	[ChangeSamplingFreqTBL]

GetCurrAdd:
	jmp	[GetCurrAddTBL]

SetCurrAdd:
	jmp	[SetCurrAddTBL]

SetSampleLoop:
	jmp	[SetSampleLoopTBL]

MoveTuneForkSample:
	jmp	[MoveTuneForkSampleTBL]

MainMixer:
	jmp	[MainMixerTBL]

SpeechEngine:
	jmp	[SpeechEngineTBL]

StopSpeech:
	jmp	[StopSpeechTBL]

CheckSpeech:
	jmp	[CheckSpeechTBL]


SoundCardTable	dd	NOSTBL,GUSTBL,SBPTBL,SB16TBL,SBTBL,GUSTBL,PNPTBL

NOSTBL	dd	NOS_SetVolume
	dd	NOS_CMD10
	dd	NOS_CMDE8
	dd	NOS_StopOneVoice
	dd	NOS_SetTheFreq
	dd	NOS_PlayVoice
	dd	NOS_KeyBoardPlayVoice
	dd	NOS_StartTheChannels
	dd	NOS_SetPanPot
	dd	NOS_SetZeroVol
	dd	NOS_SetOrigVol
	dd	NOS_ChangeActiveVoices
	dd	NOS_ClearTheSamples
	dd	NOS_MoveSample
	dd	NOS_GetSampleFromDRAM
	dd	NOS_InitSoundCard
	dd	NOS_TurnOnSoundCard
	dd	NOS_DeInitSoundCard
	dd	NOS_Alloc
	dd	NOS_DisAlloc
	dd	NOS_Mixer
	dd	NOS_StartTimer
	dd	NOS_StopTimer
	dd	NOS_FixStartSample
	dd	NOS_StartADC
	dd	NOS_StopADC
	dd	NOS_ChangeSamplingFreq
	dd	NOS_GetCurrAdd
	dd	NOS_SetCurrAdd
	dd	NOS_SetSampleLoop
	dd	NOS_MoveTuneForkSample
	dd	NOS_MainMixer
	dd	NOS_SpeechEngine
	dd	NOS_StopSpeech
	dd	NOS_CheckSpeech













GUSTBL	dd	GUS_SetVolume
	dd	GUS_CMD10
	dd	GUS_CMDE8
	dd	GUS_StopOneVoice
	dd	GUS_SetTheFreq
	dd	GUS_PlayVoice
	dd	GUS_KeyBoardPlayVoice
	dd	GUS_StartTheChannels
	dd	GUS_SetPanPot
	dd	GUS_SetZeroVol
	dd	GUS_SetOrigVol
	dd	GUS_ChangeActiveVoices
	dd	GUS_ClearTheSamples
	dd	GUS_MoveSample
	dd	GUS_GetSampleFromDRAM
	dd	GUS_InitSoundCard
	dd	GUS_TurnOnSoundCard
	dd	GUS_DeInitSoundCard
	dd	GUS_Alloc
	dd	GUS_DisAlloc
	dd	GUS_Mixer
	dd	GUS_StartTimer
	dd	GUS_StopTimer
	dd	GUS_FixStartSample
	dd	GUS_StartADC
	dd	GUS_StopADC
	dd	GUS_ChangeSamplingFreq
	dd	GUS_GetCurrAdd
	dd	GUS_SetCurrAdd
	dd	GUS_SetSampleLoop
	dd	GUS_MoveTuneForkSample
	dd	GUS_MainMixer
	dd	GUS_SpeechEngine
	dd	GUS_StopSpeech
	dd	GUS_CheckSpeech













SBPTBL	dd	SBP_SetVolume
	dd	SBP_CMD10
	dd	SBP_CMDE8
	dd	SBP_StopOneVoice
	dd	SBP_SetTheFreq
	dd	SBP_PlayVoice
	dd	SBP_KeyBoardPlayVoice
	dd	SBP_StartTheChannels
	dd	SBP_SetPanPot
	dd	SBP_SetZeroVol
	dd	SBP_SetOrigVol
	dd	SBP_ChangeActiveVoices
	dd	NOS_ClearTheSamples
	dd	NOS_MoveSample
	dd	NOS_GetSampleFromDRAM
	dd	SBP_InitSoundCard
	dd	SBP_SpeakerOn
	dd	SBP_DeInitSoundCard
	dd	NOS_Alloc
	dd	NOS_DisAlloc
	dd	SBP_Mixer
	dd	SBP_StartTimer
	dd	SBP_StopTimer
	dd	SBP_FixStartSample
	dd	SBP_StartADC
	dd	SBP_StopADC
	dd	SBP_ChangeSamplingFreq
	dd	SBP_GetCurrAdd
	dd	SBP_SetCurrAdd
	dd	SBP_SetSampleLoop
	dd	SBP_MoveTuneForkSample
	dd	SBP_MainMixer
	dd	SBP_SpeechEngine
	dd	SBP_StopSpeech
	dd	SBP_CheckSpeech













SB16TBL dd	SBP_SetVolume
	dd	SBP_CMD10
	dd	SBP_CMDE8
	dd	SBP_StopOneVoice
	dd	SBP_SetTheFreq
	dd	SBP_PlayVoice
	dd	SBP_KeyBoardPlayVoice
	dd	SBP_StartTheChannels
	dd	SBP_SetPanPot
	dd	SBP_SetZeroVol
	dd	SBP_SetOrigVol
	dd	SBP_ChangeActiveVoices
	dd	NOS_ClearTheSamples
	dd	NOS_MoveSample
	dd	NOS_GetSampleFromDRAM
	dd	SBP_InitSoundCard
	dd	SBP_SpeakerOn
	dd	SBP_DeInitSoundCard
	dd	NOS_Alloc
	dd	NOS_DisAlloc
	dd	SBP_Mixer
	dd	SBP_StartTimer
	dd	SBP_StopTimer
	dd	SBP_FixStartSample
	dd	SB16_StartADC
	dd	SBP_StopADC
	dd	SBP_ChangeSamplingFreq
	dd	SBP_GetCurrAdd
	dd	SBP_SetCurrAdd
	dd	SBP_SetSampleLoop
	dd	SBP_MoveTuneForkSample
	dd	SBP_MainMixer
	dd	SBP_SpeechEngine
	dd	SBP_StopSpeech
	dd	SBP_CheckSpeech













SBTBL	dd	SBP_SetVolume
	dd	SBP_CMD10
	dd	SBP_CMDE8
	dd	SBP_StopOneVoice
	dd	SBP_SetTheFreq
	dd	SBP_PlayVoice
	dd	SBP_KeyBoardPlayVoice
	dd	SBP_StartTheChannels
	dd	SBP_SetPanPot
	dd	SBP_SetZeroVol
	dd	SBP_SetOrigVol
	dd	SBP_ChangeActiveVoices
	dd	NOS_ClearTheSamples
	dd	NOS_MoveSample
	dd	NOS_GetSampleFromDRAM
	dd	SBP_InitSoundCard
	dd	SBP_SpeakerOn
	dd	SBP_DeInitSoundCard
	dd	NOS_Alloc
	dd	NOS_DisAlloc
	dd	SBP_Mixer
	dd	SBP_StartTimer
	dd	SBP_StopTimer
	dd	SBP_FixStartSample
	dd	SBP_StartADC
	dd	SBP_StopADC
	dd	SBP_ChangeSamplingFreq
	dd	SBP_GetCurrAdd
	dd	SBP_SetCurrAdd
	dd	SBP_SetSampleLoop
	dd	SBP_MoveTuneForkSample
	dd	SBP_MainMixer
	dd	SBP_SpeechEngine
	dd	SBP_StopSpeech
	dd	SBP_CheckSpeech













PNPTBL	dd	PNP_SetVolume
	dd	PNP_CMD10
	dd	PNP_CMDE8
	dd	PNP_StopOneVoice
	dd	PNP_SetTheFreq
	dd	PNP_PlayVoice
	dd	PNP_KeyBoardPlayVoice
	dd	PNP_StartTheChannels
	dd	PNP_SetPanPot
	dd	PNP_SetZeroVol
	dd	PNP_SetOrigVol
	dd	PNP_ChangeActiveVoices
	dd	PNP_ClearTheSamples
	dd	PNP_MoveSample
	dd	PNP_GetSampleFromDRAM
	dd	PNP_InitSoundCard
	dd	PNP_TurnOnSoundCard
	dd	PNP_DeInitSoundCard
	dd	PNP_Alloc
	dd	PNP_DisAlloc
	dd	PNP_Mixer
	dd	PNP_StartTimer
	dd	PNP_StopTimer
	dd	PNP_FixStartSample
	dd	PNP_StartADC
	dd	PNP_StopADC
	dd	PNP_ChangeSamplingFreq
	dd	PNP_GetCurrAdd
	dd	PNP_SetCurrAdd
	dd	PNP_SetSampleLoop
	dd	PNP_MoveTuneForkSample
	dd	PNP_MainMixer
	dd	PNP_SpeechEngine
	dd	PNP_StopSpeech
	dd	PNP_CheckSpeech


StartOfJumpTable	equ	$
SetVolumeTBL		dd	0
CMD10TBL		dd	0
CMDE8TBL		dd	0
StopOneVoiceTBL 	dd	0
SetTheFreqTBL		dd	0
PlayVoiceTBL		dd	0
KeyBoardPlayVoiceTBL	dd	0
StartTheChannelsTBL	dd	0
SetPanPotTBL		dd	0
SetZeroVolTBL		dd	0
SetOrigVolTBL		dd	0
ChangeActiveVoicesTBL	dd	0
ClearTheSamplesTBL	dd	0
MoveSampleTBL		dd	0
GetSampleFromDRAMTBL	dd	0
InitSoundCardTBL	dd	0
TurnOnSoundCardTBL	dd	0
DeInitSoundCardTBL	dd	0
AllocSampleTBL		dd	0
DisallocSampleTBL	dd	0
MixerTBL		dd	0
StartTimerTBL		dd	0
StopTimerTBL		dd	0
FixStartSampleTBL	dd	0
StartADCTBL		dd	0
StopADCTBL		dd	0
ChangeSamplingFreqTBL	dd	0
GetCurrAddTBL		dd	0
SetCurrAddTBL		dd	0
SetSampleLoopTBL	dd	0
MoveTuneForkSampleTBL	dd	0
MainMixerTBL		dd	0
SpeechEngineTBL 	dd	0
StopSpeechTBL		dd	0
CheckSpeechTBL		dd	0
EndOfJumpTable		equ	$


InitJumpTable	Proc	Near
	pushad
	mov	ebx,SoundCard
	mov	esi,[SoundCardTable+ebx*4]
	mov	ecx,(EndOfJumpTable-StartOfJumpTable)/4
	lea	edi,StartOfJumpTable
	rep	movsd
	popad
	ret
InitJumpTable	EndP


DetectSoundCard Proc	Near
	pushad

	; Force new configuration of soundcard?
	cmp	Force_SC_Config,1
	jnz	@@noforce
	mov	SoundCard,0	; Force nosound
	stc
	jmp	_retp

@@noforce:
	cmp	SoundCard_BasePort,0	;Already installed
	jnz	AlreadyInstalled

	call    AMS_GetPNPEnv
	jnc	AlreadyInstalled

	call	AMS_GetGUSEnv
	jnc	FoundGUSCheckForMAX

	call	AMS_GetSBEnv
	jc	_retp

AlreadyInstalled:
;	movzx	eax,Codec_Base

;	mov	ah,018h
;	mov	cl,3
;	move	edi,0a0000h+80-12+80*3
;	movzx	ebx,SoundCard_DMA1
;	call	PutDecimal

	mov	al,SoundCard_DMA1
	cmp	al,0
	jz	@@Skutt
	mov	al,1
@@Skutt:
	mov	DMAOnOff,al

	mov	eax,SoundCard
	call	GetMaxHertz
	cmp	PlayFreq,ebx
	jbe	@@ThatsOkay
	mov	PlayFreq,ebx
@@ThatsOkay:

	clc
	popad
	ret

FoundGUSCheckForMAX:
	call	AMS_GetMAXEnv
	jc	AlreadyInstalled
	mov	ax,Codec_Base
	mov	SoundCard_BasePort2,ax
	jmp	AlreadyInstalled

;NoUltra16Env:
;	mov	ax,SoundCard_BasePort
;	sub	ax,200h
;	add	ax,30ch
;	mov	Codec_Base,ax
;	mov	SoundCard_BasePort2,ax
;	jmp	AlreadyInstalled

DetectSoundCard EndP

;in  eax=SoundCard
;out ebx=max
GetMaxHertz:
	cmp	eax,2
	jz	@@SBPSpecial
	cmp	eax,4
	jz	@@SBSpecial
@@Goto10:
	mov	ebx,45454
	jmp	_ret

@@SBPSpecial:
	cmp	SB_StereoAllowed,0
	jz	@@Goto10
	mov	ebx,22727
	jmp	_ret
@@SBSpecial:
	cmp	SoundCardSub,2
	jz	@@Goto10
	mov	ebx,22222
	jmp	_ret

UpdateShadows:
	pushad
	movzx	ecx,Samples
	mov	ebp,1
@@NxtShadow:
	GetOffset ebp,eax,ENV_Shadow
	cmp	byte ptr [eax],0
	jz	@@NoShadow
	movzx	ebx,byte ptr [eax]		;Shadow nr

	pushad					;Get sample nr
	mov	ecx,16
	shl	ebx,4
	shl	ebp,4
@@NxtSample:
	mov	edx,[SampleOffsetEnd+ebx*4]
	mov	ds:[SampleOffsetEnd+ebp*4],edx

	mov	eax,ds:[SampleOffsetStart+ebp*4]
	sub	ds:[LoopStart+ebp*4],eax
	sub	ds:[LoopEnd+ebp*4],eax

	mov	eax,[SampleOffsetStart+ebx*4]
	mov	ds:[SampleOffsetStart+ebp*4],eax
	add	ds:[LoopStart+ebp*4],eax
	add	ds:[LoopEnd+ebp*4],eax

	cmp	ds:[LoopStart+ebp*4],edx
	jbe	@@NoWorries1
	mov	ds:[LoopStart+ebp*4],edx
@@NoWorries1:
	cmp	ds:[LoopEnd+ebp*4],edx
	jbe	@@NoWorries2
	mov	ds:[LoopEnd+ebp*4],edx
@@NoWorries2:
	inc	ebp
	inc	ebx
	loop	@@NxtSample
	popad

@@NoShadow:
	inc	ebp
	loop	@@NxtShadow
	popad
	ret



;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;Calls: EBX = Sample #
;	EDI = Channel
;	AL  = Panpot (0-15)
;	AH  = Note (0-119) (NoteOff=-1)
;	CL  = Volume
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
LoadFXEngine	db	0
FXEngine	Proc	Near
IF	PLAYER
	cmp	LoadFXEngine,0		;If not installed
	jz	_ret
ENDIF
	pushad

	movzx	edx,AllocChannels
	add	edi,edx 		;Remap channels
	sub	edi,4

	push	ax
	mov	[CurrSample+edi*2],bx
	mov	ax,bx
	shr	ax,4
	mov	[CurrInst+edi],al
	pop	ax

	add	ah,2			;Skip NoteOff
	mov	[CurrVolume+edi],cl
	mov	[CurrNoteTable+edi],ah
	mov	[CurrentChannelPanPot+edi],al
	bts	EnvVolCheck,edi
	bts	EnvVibCheck,edi
	bts	EnvPanCheck,edi
	and	[SkipFlag+edi*2],0fffbh
	mov	[ENV_SpdCounter+edi],-1
	mov	[ENV_VInterPol+edi*2],-1
	mov	[ENV_CurrVPoint+edi],0
	mov	[ENV_VolInfo+edi*4],0
	mov	[ENV_FadeCounter+edi*4],0ffffh
	call	PlayVoice
	popad
	ret
FXEngine	EndP

;ebx=sample
;SizeAllocated=New Size
FixAllocSampleError	Proc	Near
	push	eax
	mov	eax,SizeAllocated		;in samples
	add	eax,[SampleOffsetStart+ebx*4]
	mov	[SampleOffsetEnd+ebx*4],eax
	cmp	[LoopStart+ebx*4],eax
	jb	NoSTFix
	mov	[LoopStart+ebx*4],eax
NoSTFix:
	cmp	[LoopEnd+ebx*4],eax
	jb	NoENFix
	mov	[LoopEnd+ebx*4],eax
NoENFix:
	pop	eax
	ret
FixAllocSampleError	EndP

IF TRANVERSION		;\\
code32	ends
ENDIF			;//

IF DOS32VERSION 	;\\
ends
ENDIF			;//

;IF PMODEWVERSION	;\\
;_TEXT	ends
;ENDIF			;//

ends

end

;/ABS\02972032560262100010000100001000010000100070604471
